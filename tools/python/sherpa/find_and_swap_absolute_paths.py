#!/usr/bin/env python
import os,sys,optparse,logging,subprocess,shutil
logger = logging.getLogger(__name__)

SHERPA_JOB_PATH='${SHERPA_JOB_PATH}'
SHERPA_INST_PATH='${SHERPA_INST_PATH}'

def main():
   logging.basicConfig(level=logging.INFO,format='%(asctime)s %(levelname)s:%(name)s:%(message)s')

   parser = optparse.OptionParser(description='This script searches the code generated by Sherpa and replaces the hard coded absolute paths for the sherpa installation path and the job path with environment variables that can then be set by the user. The environment variables are SHERPA_INST_PATH and SHERPA_JOB_PATH.')
   parser.add_option('-g','--gen-path',dest='gen_path',help='The path to the directory where the code generation step was run')
   parser.add_option('-s','--sherpa-path',dest='sherpa_path',help='The installation path of sherpa. This was the "--prefix" parameter passed to the configuration script of Sherpa where "lib"/"bin" are located.')
   options,args = parser.parse_args()

   
   manditory_args = [
                     'gen_path',
                     'sherpa_path',
                  ]

   for man in manditory_args:
      if options.__dict__[man] is None:
         logger.error('Must specify option: ' + man)
         parser.print_help()
         sys.exit(-1)
   
   # first grep for files in the job directory with the job directory path
   # then loop over these files using 'sed' to remove the absolute path and
   # replace with an environment variable

   grep_cmd = "grep -r -l -I --exclude='*.la' " + '"' + options.gen_path + '" ' + options.gen_path + '/'
   logger.info('running ' + grep_cmd) 

   p = subprocess.Popen(grep_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
   stdout,stderr = p.communicate()
   if p.returncode != 0:
      logger.error('grep returned not zero returncode: ' + str(p.returncode) + ': stdout = \n' + stdout + '\n stderr = \n' + stderr)
      sys.exit(-2)

   filelist = stdout.split('\n')
   
   logger.info('job path: ' + options.gen_path)
   escaped_gen_path = options.gen_path.replace('\\','\\\\').replace('/','\/').replace('.','\.')
   logger.info(' escaped: ' + escaped_gen_path)

   for filename in filelist:
      if os.path.exists(filename):
         sed_cmd = 'sed "s/' + escaped_gen_path + '/' + SHERPA_JOB_PATH.replace('$','\$') + '/g" ' + filename
         logger.info('running ' + sed_cmd)
         p = subprocess.Popen(sed_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
         stdout,stderr = p.communicate()
         if p.returncode != 0:
            logger.error('sed returned not zero returncode: ' + str(p.returncode) + ': stdout = \n' + stdout + '\n stderr = \n' + stderr)
            sys.exit(-2)
         f = open( filename + '.tmp','w')
         f.write(stdout)
         f.close()
         shutil.move(filename+'.tmp',filename)

   # second grep for files in the job directory with the sherpa install path
   # then loop over these files using 'sed' to remove the absolute path and
   # replace with an environment variable

   grep_cmd = "grep -r -l -I --exclude='*.la' " + '"' + options.sherpa_path + '" ' + options.gen_path + '/'
   logger.info('running ' + grep_cmd) 

   p = subprocess.Popen(grep_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
   stdout,stderr = p.communicate()
   if p.returncode != 0:
      logger.error('grep returned not zero returncode: ' + str(p.returncode) + ': stdout = \n' + stdout + '\n stderr = \n' + stderr)
      sys.exit(-2)

   filelist = stdout.split('\n')
   
   logger.info('sherpa path: ' + options.sherpa_path)
   escaped_sherpa_path = options.sherpa_path.replace('\\','\\\\').replace('/','\/').replace('.','\.')
   logger.info(' escaped: ' + escaped_sherpa_path)

   for filename in filelist:
      if os.path.exists(filename):
         sed_cmd = 'sed "s/' + escaped_sherpa_path + '/' + SHERPA_INST_PATH.replace('$','\$') + '/g" ' + filename
         logger.info('running ' + sed_cmd)
         p = subprocess.Popen(sed_cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE,shell=True)
         stdout,stderr = p.communicate()
         if p.returncode != 0:
            logger.error('sed returned not zero returncode: ' + str(p.returncode) + ': stdout = \n' + stdout + '\n stderr = \n' + stderr)
            sys.exit(-2)
         f = open( filename + '.tmp','w')
         f.write(stdout)
         f.close()
         shutil.move(filename+'.tmp',filename)




if __name__ == "__main__":
   main()
