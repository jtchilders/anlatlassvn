import os, distutils.spawn
vars = Variables('.SConstruct')
vars.Add(PathVariable('sherpa','path to sherpa','/users/hpcusers/svn/generators/sherpa/v220/dev/branches/patchtest4/install',PathVariable.PathIsDir))
vars.Add(PathVariable('libdir','lib path','/users/hpcusers/svn/generators/sherpa/v220/dev/branches/patchtest4/install/lib/SHERPA-MC',PathVariable.PathIsDirCreate))
env = Environment(variables=vars,CPPPATH=['/users/hpcusers/svn/generators/sherpa/v220/dev/branches/patchtest4/install/include/SHERPA-MC'],LIBPATH=['/users/hpcusers/svn/generators/sherpa/v220/dev/branches/patchtest4/install/lib/SHERPA-MC'],RPATH=['/users/hpcusers/svn/generators/sherpa/v220/dev/branches/patchtest4/install/lib/SHERPA-MC'])
vars.Add('CXX','The C++ Compiler','g++ -Wl,--no-as-needed')
vars.Add('CXXFLAGS','The C++ Flags',['-g','-O2'])
vars.Update(env)
Help(vars.GenerateHelpText(env))
vars.Save('.SConstruct',env)

env['ENV']=os.environ
if env['PLATFORM']=='darwin':
   env.Append( LINKFLAGS='-Wl,-undefined -Wl,dynamic_lookup' )

modellib = env.SharedLibrary('${libname}',${sources},LIBS=['ModelUFO'])
env.Install('$${libdir}',modellib)
env.Alias('install',['$${libdir}'])

