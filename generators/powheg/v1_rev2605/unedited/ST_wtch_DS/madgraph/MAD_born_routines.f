      subroutine choose_born_process(p,flav,amp2)
      real * 8 p(0:3,1: 4)
      integer flav( 4)
      real * 8 amp2

      if ((flav(1).eq.5).and.(flav(2).eq.0)
     $.and.(flav(3).eq.6)
     $.and.(flav(4).eq.-24)
     $)then
      call Sbg_twm(p,amp2)

      elseif ((flav(1).eq.1).and.(flav(2).eq.0)
     $.and.(flav(3).eq.6)
     $.and.(flav(4).eq.-24)
     $)then
      call Sdg_twm(p,amp2)

      elseif ((flav(1).eq.0).and.(flav(2).eq.5)
     $.and.(flav(3).eq.6)
     $.and.(flav(4).eq.-24)
     $)then
      call Sgb_twm(p,amp2)

      elseif ((flav(1).eq.0).and.(flav(2).eq.1)
     $.and.(flav(3).eq.6)
     $.and.(flav(4).eq.-24)
     $)then
      call Sgd_twm(p,amp2)

      elseif ((flav(1).eq.0).and.(flav(2).eq.3)
     $.and.(flav(3).eq.6)
     $.and.(flav(4).eq.-24)
     $)then
      call Sgs_twm(p,amp2)

      elseif ((flav(1).eq.3).and.(flav(2).eq.0)
     $.and.(flav(3).eq.6)
     $.and.(flav(4).eq.-24)
     $)then
      call Ssg_twm(p,amp2)

      endif
      end

      SUBROUTINE Sbg_twm(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : b g -> t w-  
C  
C Crossing   1 is b g -> t w-  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps_b.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  24, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 bg_twm
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2bg_twm(maxamps), jamp2bg_twm(0:maxamps)
      common/to_ampsbg_twm/  amp2bg_twm,       jamp2bg_twm

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrixbg_twm/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.false./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /    2/          
      DATA jamp2bg_twm(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 0/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1,-1, 1, 0/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1,-1, 0/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) /-1, 1, 1, 0/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1,-1,-1, 0/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 4) / 1,-1, 1, 0/
      DATA (NHEL(IHEL,  18),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 4) / 1, 1,-1, 0/
      DATA (NHEL(IHEL,  21),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  22),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 4) / 1, 1, 1, 0/
      DATA (NHEL(IHEL,  24),IHEL=1, 4) / 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2bg_twm(ihel)=0d0
              jamp2bg_twm(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2bg_twm(0))
              jamp2bg_twm(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=bg_twm(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=bg_twm(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2bg_twm(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2bg_twm(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION bg_twm(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : b g -> t w-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
      include "genps_b.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2bg_twm(maxamps), jamp2bg_twm(0:maxamps)
      common/to_ampsbg_twm/  amp2bg_twm,       jamp2bg_twm
      include "../coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     4/                                  
C               T[ 3, 1, 2]                                                
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),BMASS ,NHEL(1   ),+1*IC(1   ),W(1,1   ))       
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL OXXXXX(P(0,3   ),TMASS ,NHEL(3   ),+1*IC(3   ),W(1,3   ))       
      CALL VXXXXX(P(0,4   ),WMASS ,NHEL(4   ),+1*IC(4   ),W(1,4   ))       
      CALL FVOXXX(W(1,3   ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,5   ))     
      CALL IOVXXX(W(1,1   ),W(1,5   ),W(1,4   ),GWFTB ,AMP(1   ))          
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,BMASS   ,ZERO    ,W(1,6   ))     
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GWFTB ,AMP(2   ))          
      JAMP(   1) = +AMP(   1)+AMP(   2)
      bg_twm = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          bg_twm =bg_twm+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2bg_twm(i)=amp2bg_twm(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2bg_twm(i)=Jamp2bg_twm(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
      SUBROUTINE Sdg_twm(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : d g -> t w-  
C  
C Crossing   1 is d g -> t w-  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps_b.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  24, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 dg_twm
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2dg_twm(maxamps), jamp2dg_twm(0:maxamps)
      common/to_ampsdg_twm/  amp2dg_twm,       jamp2dg_twm

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrixdg_twm/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.false./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /    2/          
      DATA jamp2dg_twm(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 0/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1,-1, 1, 0/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1,-1, 0/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) /-1, 1, 1, 0/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1,-1,-1, 0/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 4) / 1,-1, 1, 0/
      DATA (NHEL(IHEL,  18),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 4) / 1, 1,-1, 0/
      DATA (NHEL(IHEL,  21),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  22),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 4) / 1, 1, 1, 0/
      DATA (NHEL(IHEL,  24),IHEL=1, 4) / 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2dg_twm(ihel)=0d0
              jamp2dg_twm(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2dg_twm(0))
              jamp2dg_twm(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=dg_twm(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=dg_twm(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2dg_twm(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2dg_twm(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION dg_twm(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : d g -> t w-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
      include "genps_b.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2dg_twm(maxamps), jamp2dg_twm(0:maxamps)
      common/to_ampsdg_twm/  amp2dg_twm,       jamp2dg_twm
      include "../coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     4/                                  
C               T[ 3, 1, 2]                                                
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL OXXXXX(P(0,3   ),TMASS ,NHEL(3   ),+1*IC(3   ),W(1,3   ))       
      CALL VXXXXX(P(0,4   ),WMASS ,NHEL(4   ),+1*IC(4   ),W(1,4   ))       
      CALL FVOXXX(W(1,3   ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,5   ))     
      CALL IOVXXX(W(1,1   ),W(1,5   ),W(1,4   ),GWFTD ,AMP(1   ))          
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,6   ))     
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GWFTD ,AMP(2   ))          
      JAMP(   1) = +AMP(   1)+AMP(   2)
      dg_twm = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          dg_twm =dg_twm+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2dg_twm(i)=amp2dg_twm(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2dg_twm(i)=Jamp2dg_twm(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
      SUBROUTINE Sgb_twm(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : g b -> t w-  
C  
C Crossing   1 is g b -> t w-  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps_b.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  24, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 gb_twm
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2gb_twm(maxamps), jamp2gb_twm(0:maxamps)
      common/to_ampsgb_twm/  amp2gb_twm,       jamp2gb_twm

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrixgb_twm/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.false./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /    2/          
      DATA jamp2gb_twm(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 0/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1,-1, 1, 0/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1,-1, 0/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) /-1, 1, 1, 0/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1,-1,-1, 0/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 4) / 1,-1, 1, 0/
      DATA (NHEL(IHEL,  18),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 4) / 1, 1,-1, 0/
      DATA (NHEL(IHEL,  21),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  22),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 4) / 1, 1, 1, 0/
      DATA (NHEL(IHEL,  24),IHEL=1, 4) / 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2gb_twm(ihel)=0d0
              jamp2gb_twm(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2gb_twm(0))
              jamp2gb_twm(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=gb_twm(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=gb_twm(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2gb_twm(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2gb_twm(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION gb_twm(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : g b -> t w-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
      include "genps_b.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2gb_twm(maxamps), jamp2gb_twm(0:maxamps)
      common/to_ampsgb_twm/  amp2gb_twm,       jamp2gb_twm
      include "../coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     4/                                  
C               T[ 3, 2, 1]                                                
C ----------
C BEGIN CODE
C ----------
      CALL VXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1*IC(1   ),W(1,1   ))        
      CALL IXXXXX(P(0,2   ),BMASS ,NHEL(2   ),+1*IC(2   ),W(1,2   ))       
      CALL OXXXXX(P(0,3   ),TMASS ,NHEL(3   ),+1*IC(3   ),W(1,3   ))       
      CALL VXXXXX(P(0,4   ),WMASS ,NHEL(4   ),+1*IC(4   ),W(1,4   ))       
      CALL FVOXXX(W(1,3   ),W(1,1   ),GG ,TMASS   ,TWIDTH  ,W(1,5   ))     
      CALL IOVXXX(W(1,2   ),W(1,5   ),W(1,4   ),GWFTB ,AMP(1   ))          
      CALL FVIXXX(W(1,2   ),W(1,1   ),GG ,BMASS   ,ZERO    ,W(1,6   ))     
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GWFTB ,AMP(2   ))          
      JAMP(   1) = +AMP(   1)+AMP(   2)
      gb_twm = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          gb_twm =gb_twm+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2gb_twm(i)=amp2gb_twm(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2gb_twm(i)=Jamp2gb_twm(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
      SUBROUTINE Sgd_twm(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : g d -> t w-  
C  
C Crossing   1 is g d -> t w-  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps_b.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  24, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 gd_twm
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2gd_twm(maxamps), jamp2gd_twm(0:maxamps)
      common/to_ampsgd_twm/  amp2gd_twm,       jamp2gd_twm

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrixgd_twm/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.false./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /    2/          
      DATA jamp2gd_twm(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 0/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1,-1, 1, 0/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1,-1, 0/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) /-1, 1, 1, 0/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1,-1,-1, 0/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 4) / 1,-1, 1, 0/
      DATA (NHEL(IHEL,  18),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 4) / 1, 1,-1, 0/
      DATA (NHEL(IHEL,  21),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  22),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 4) / 1, 1, 1, 0/
      DATA (NHEL(IHEL,  24),IHEL=1, 4) / 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2gd_twm(ihel)=0d0
              jamp2gd_twm(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2gd_twm(0))
              jamp2gd_twm(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=gd_twm(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=gd_twm(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2gd_twm(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2gd_twm(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION gd_twm(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : g d -> t w-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
      include "genps_b.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2gd_twm(maxamps), jamp2gd_twm(0:maxamps)
      common/to_ampsgd_twm/  amp2gd_twm,       jamp2gd_twm
      include "../coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     4/                                  
C               T[ 3, 2, 1]                                                
C ----------
C BEGIN CODE
C ----------
      CALL VXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1*IC(1   ),W(1,1   ))        
      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
      CALL OXXXXX(P(0,3   ),TMASS ,NHEL(3   ),+1*IC(3   ),W(1,3   ))       
      CALL VXXXXX(P(0,4   ),WMASS ,NHEL(4   ),+1*IC(4   ),W(1,4   ))       
      CALL FVOXXX(W(1,3   ),W(1,1   ),GG ,TMASS   ,TWIDTH  ,W(1,5   ))     
      CALL IOVXXX(W(1,2   ),W(1,5   ),W(1,4   ),GWFTD ,AMP(1   ))          
      CALL FVIXXX(W(1,2   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,6   ))     
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GWFTD ,AMP(2   ))          
      JAMP(   1) = +AMP(   1)+AMP(   2)
      gd_twm = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          gd_twm =gd_twm+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2gd_twm(i)=amp2gd_twm(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2gd_twm(i)=Jamp2gd_twm(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
      SUBROUTINE Sgs_twm(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : g s -> t w-  
C  
C Crossing   1 is g s -> t w-  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps_b.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  24, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 gs_twm
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2gs_twm(maxamps), jamp2gs_twm(0:maxamps)
      common/to_ampsgs_twm/  amp2gs_twm,       jamp2gs_twm

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrixgs_twm/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.false./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /    2/          
      DATA jamp2gs_twm(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 0/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1,-1, 1, 0/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1,-1, 0/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) /-1, 1, 1, 0/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1,-1,-1, 0/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 4) / 1,-1, 1, 0/
      DATA (NHEL(IHEL,  18),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 4) / 1, 1,-1, 0/
      DATA (NHEL(IHEL,  21),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  22),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 4) / 1, 1, 1, 0/
      DATA (NHEL(IHEL,  24),IHEL=1, 4) / 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2gs_twm(ihel)=0d0
              jamp2gs_twm(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2gs_twm(0))
              jamp2gs_twm(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=gs_twm(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=gs_twm(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2gs_twm(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2gs_twm(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION gs_twm(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : g s -> t w-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
      include "genps_b.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2gs_twm(maxamps), jamp2gs_twm(0:maxamps)
      common/to_ampsgs_twm/  amp2gs_twm,       jamp2gs_twm
      include "../coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     4/                                  
C               T[ 3, 2, 1]                                                
C ----------
C BEGIN CODE
C ----------
      CALL VXXXXX(P(0,1   ),ZERO ,NHEL(1   ),-1*IC(1   ),W(1,1   ))        
      CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
      CALL OXXXXX(P(0,3   ),TMASS ,NHEL(3   ),+1*IC(3   ),W(1,3   ))       
      CALL VXXXXX(P(0,4   ),WMASS ,NHEL(4   ),+1*IC(4   ),W(1,4   ))       
      CALL FVOXXX(W(1,3   ),W(1,1   ),GG ,TMASS   ,TWIDTH  ,W(1,5   ))     
      CALL IOVXXX(W(1,2   ),W(1,5   ),W(1,4   ),GWFTS ,AMP(1   ))          
      CALL FVIXXX(W(1,2   ),W(1,1   ),GG ,ZERO    ,ZERO    ,W(1,6   ))     
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GWFTS ,AMP(2   ))          
      JAMP(   1) = +AMP(   1)+AMP(   2)
      gs_twm = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          gs_twm =gs_twm+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2gs_twm(i)=amp2gs_twm(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2gs_twm(i)=Jamp2gs_twm(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
      SUBROUTINE Ssg_twm(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : s g -> t w-  
C  
C Crossing   1 is s g -> t w-  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps_b.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  24, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
      REAL*8 sg_twm
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2sg_twm(maxamps), jamp2sg_twm(0:maxamps)
      common/to_ampssg_twm/  amp2sg_twm,       jamp2sg_twm

      character*79         hel_buff
      common/to_helicity/  hel_buff

      REAL*8 POL(2)
      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
      common/to_matrixsg_twm/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
      DATA multi_channel/.false./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /    2/          
      DATA jamp2sg_twm(0) /   1/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 4) /-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 4) /-1,-1,-1, 0/
      DATA (NHEL(IHEL,   3),IHEL=1, 4) /-1,-1,-1, 1/
      DATA (NHEL(IHEL,   4),IHEL=1, 4) /-1,-1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 4) /-1,-1, 1, 0/
      DATA (NHEL(IHEL,   6),IHEL=1, 4) /-1,-1, 1, 1/
      DATA (NHEL(IHEL,   7),IHEL=1, 4) /-1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 4) /-1, 1,-1, 0/
      DATA (NHEL(IHEL,   9),IHEL=1, 4) /-1, 1,-1, 1/
      DATA (NHEL(IHEL,  10),IHEL=1, 4) /-1, 1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 4) /-1, 1, 1, 0/
      DATA (NHEL(IHEL,  12),IHEL=1, 4) /-1, 1, 1, 1/
      DATA (NHEL(IHEL,  13),IHEL=1, 4) / 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 4) / 1,-1,-1, 0/
      DATA (NHEL(IHEL,  15),IHEL=1, 4) / 1,-1,-1, 1/
      DATA (NHEL(IHEL,  16),IHEL=1, 4) / 1,-1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 4) / 1,-1, 1, 0/
      DATA (NHEL(IHEL,  18),IHEL=1, 4) / 1,-1, 1, 1/
      DATA (NHEL(IHEL,  19),IHEL=1, 4) / 1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 4) / 1, 1,-1, 0/
      DATA (NHEL(IHEL,  21),IHEL=1, 4) / 1, 1,-1, 1/
      DATA (NHEL(IHEL,  22),IHEL=1, 4) / 1, 1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 4) / 1, 1, 1, 0/
      DATA (NHEL(IHEL,  24),IHEL=1, 4) / 1, 1, 1, 1/
      DATA (  IC(IHEL,  1),IHEL=1, 4) / 1, 2, 3, 4/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  96/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2sg_twm(ihel)=0d0
              jamp2sg_twm(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2sg_twm(0))
              jamp2sg_twm(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
                 T=sg_twm(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
              T=sg_twm(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2sg_twm(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2sg_twm(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
      REAL*8 FUNCTION sg_twm(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : s g -> t w-  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=   2,NEIGEN=  1) 
      include "genps_b.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=   6, NCOLOR=   1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2sg_twm(maxamps), jamp2sg_twm(0:maxamps)
      common/to_ampssg_twm/  amp2sg_twm,       jamp2sg_twm
      include "../coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            1/                                       
      DATA (CF(i,1  ),i=1  ,1  ) /     4/                                  
C               T[ 3, 1, 2]                                                
C ----------
C BEGIN CODE
C ----------
      CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
      CALL VXXXXX(P(0,2   ),ZERO ,NHEL(2   ),-1*IC(2   ),W(1,2   ))        
      CALL OXXXXX(P(0,3   ),TMASS ,NHEL(3   ),+1*IC(3   ),W(1,3   ))       
      CALL VXXXXX(P(0,4   ),WMASS ,NHEL(4   ),+1*IC(4   ),W(1,4   ))       
      CALL FVOXXX(W(1,3   ),W(1,2   ),GG ,TMASS   ,TWIDTH  ,W(1,5   ))     
      CALL IOVXXX(W(1,1   ),W(1,5   ),W(1,4   ),GWFTS ,AMP(1   ))          
      CALL FVIXXX(W(1,1   ),W(1,2   ),GG ,ZERO    ,ZERO    ,W(1,6   ))     
      CALL IOVXXX(W(1,6   ),W(1,3   ),W(1,4   ),GWFTS ,AMP(2   ))          
      JAMP(   1) = +AMP(   1)+AMP(   2)
      sg_twm = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
          sg_twm =sg_twm+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2sg_twm(i)=amp2sg_twm(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2sg_twm(i)=Jamp2sg_twm(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
