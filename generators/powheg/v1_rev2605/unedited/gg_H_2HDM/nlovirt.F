      subroutine twoloopfactors(g2l)
      implicit none
      include 'PhysPars.h'
      include 'Flags.h'
      include 'pwhg_st.h'
      integer i,OSdivita
      double precision cf,cffer,cfsca,ca,m0,m12,y0,y12,mum
      double complex twoloop, twoloopT0,twoloop_pseudo,twoloop_divita
      external twoloop
      external twoloopT0
      external twoloop_pseudo
      external twoloop_divita

c     amp1loop is the 1-loop amplitude with EXACT mass dependence
      double precision bornqcd
      double complex ampl1loop,ampl,effampl1loop,tmpampl
      common /bornampl/ampl1loop,bornqcd

      double complex a1_full_top,a1_full_bot
      double precision a1_top,a2_top
      double complex a1_bot,a2_bot

      double complex a1_full_top_nosm,a1_full_bot_nosm
      double complex a1_top_nosm,a2_top_nosm
      double complex a1_bot_nosm,a2_bot_nosm

      double precision g2l
      double complex bot2l,top2l,bot2ldivita,top2ldivita

      double precision glutop0,glutop1
      double complex glutop,glubot


      cf = 4d0/3d0
      cffer = 4d0/3d0
      cfsca = 4d0/3d0
      ca = 3d0
      ampl = dcmplx(0d0)
      tmpampl = dcmplx(0d0)

c     Two loop SM contributions with full mass dependence
      if( (ih.eq.1).or.(ih.eq.2)) then

      do i=1,afer
         m12=mfer(i)
         y12=m12**2/mh2
         ampl = ampl + lambdafer(i)*twoloop(1d0/y12,trfer(i),cf,ca,
     $        ferlogmratio(i),i)
      end do

      else
c     pseudoscalar
      if(massren.eq.0) then
        OSdivita=1
      elseif (massren.eq.1) then
        OSdivita=0
      elseif (massren.eq.2) then
        OSdivita=2
      else
        write(*,*) massren,'Unrecognized divita renorm scheme'
        stop
      endif

      do i=1,afer
         m12=mfer(i)
         y12=m12**2/mh2
         call getgluABDV(OSdivita,mh,m12,q,lambdafer(i),tmpampl)
         ampl = ampl + tmpampl
      end do

      endif


      g2l = ampl/ampl1loop + dconjg(ampl/ampl1loop)
!      write(*,*) '2loop',3d0*ampl
!      write(*,*) '1loop',3d0/2d0*ampl1loop
!      write(*,*) 'g2l',g2l
!      stop
      end

c     DiVita - Chaplin subroutine
c     DiVita subroutines
      subroutine getgluABDV(OS,mA,mq,q,zzq,ampl)

c     subroutine obtained by modifying getglu with the addition of the
c     full top-gluon result in terms of HPL's (S. Di Vita, 2012/06/18)

c     DESCRIPTION: two-loop quark-gluon contributions to the ggA vertex
c     eqs.(19)-(26) of [arXiv:1107.0914], supplemented with the
c     explicit formulae for the functions F1t, F2t, F3t valid for
c     arbitrary values of mA/mt, see below eq.(20), reported in
c     ref. [hep-ph/0611266]
c
c     NOTE: the top-gluon contribution is:
c     ampl  -> full result in terms of HPL. See 1107.0914 and the
c                explicit formulae in .
c
c     WARNING: this subroutine needs to be linked against the CHAPLIN library
c              which implements the evaluation of (Complex) HPL's in FORTRAN
c              [arXiv:1106.5739].
c
      implicit none

      integer OS
      double precision mA,mq,q
      double complex ampl

      double precision CF,CA,TR,tauq,z2,z3,pi,logq,zzq

      double complex F1q,F2q,F3q
      double complex HPL1,HPL2,HPL3,HPL4,x,H1,H2

      logical debugflag
      common/debug/debugflag

      parameter (pi = 3.1415926535897932384626433832795029D0)

      CF = 4d0/3d0
      CA = 3d0
      TR = 1d0/2d0
      z2 = 1.6449340668482264365d0
      z3 = 1.2020569031595942854d0

      tauq = 4*mq**2/mA**2


c     full result in terms of HPL's.
c     recall that x := (sqrt(1d0-tauq) - 1d0) / (sqrt(1d0-tauq) + 1d0)


      if(tauq>=1.d0) then
         x = (-2d0 + (0d0,2d0)*Sqrt(-1d0 + tauq) + tauq)/tauq
      else
         x = (-2d0 + 2d0*Sqrt(1d0 - tauq) + tauq)/tauq
      endif

      H1 = (9d0*z2**2)/10d0 + 2d0*z3*HPL1(0,x) + z2*HPL2(0,0,x) -
     $     2*HPL4(0,-1,0,0,x) + 4*HPL4(0,0,-1,0,x) +
     $     HPL4(0,0,0,0,x)/4d0 - HPL4(0,0,1,0,x) +
     $     (7*HPL4(0,1,0,0,x))/2d0

      H2 = (4d0*z2**2)/5d0 + 2d0*z3 + (3d0*z3*HPL1(0,x))/2d0 +
     $     3d0*z3*HPL1(1,x) + ((1d0 + 2d0*z2)*HPL2(0,0,x))/4d0 +
     $     z2*HPL2(1,0,x) - 2*HPL3(1,0,0,x) +
     $     HPL4(0,0,-1,0,x) + HPL4(0,0,0,0,x)/4d0 +
     $     2d0*HPL4(1,0,-1,0,x) - HPL4(1,0,0,0,x)


      F1q = (-8*x*(1 + x**2)*H1)/((-1 + x)**3*(1 + x)) +
     $     (4*x*(2*(1 - x)**2 -
     $     (1 - x**2)*z2)*HPL1(0,x))/((-1 + x)**3*(1 + x)) +
     $  (8*x*(1 - x**2)*HPL2(0,0,x))/((-1 + x)**3*(1 + x)) +
     $     (6*x*(1 + x)*HPL3(0,0,0,x))/(-1 + x)**3 -
     $  (4*x*(z3 - 4*HPL3(0,-1,0,x) + HPL3(0,1,0,x) -
     $     5*HPL3(1,0,0,x)))/(-1 + x)**2

      F2q = (-6*x*HPL1(0,x))/((-1+x)*(1 + x)) +
     $     (6*x*HPL2(0,0,x))/(-1+x)**2

      F3q = (12d0*x**2*HPL3(0,0,0,x))/(-1+x)**3 + (4d0*x*(z3 - 2d0*H2 -
     $     HPL3(1,0,0,x)))/(-1 + x)**2

      if (debugflag) then
        write(*,*) 'x', x
        write(*,*) 'F1',F1q
        write(*,*) 'F2',F2q
        write(*,*) 'F3',F3q
      endif

      if(OS.eq.0) then
         logq = 2*log(mq/q)
         ampl = CF*(F1q  +F2q*(logq-1d0/3d0))+CA*F3q
      else if (OS.eq.2) then
         logq = 2*log(mq/q)
         ampl = CF*(F1q  +F2q*logq)+CA*F3q
      else if (OS.eq.1) then
         ampl = CF*(F1q  +4d0/3d0*F2q  )+CA*F3q
      endif
      ampl = TR*zzq*ampl

      return
      end

c     h/H
      double complex function twoloop(s,TR,CF,CA,logmassratio,numfer)
      implicit none
      include 'Flags.h'
      double precision s,t,x,y,Hr1,Hr2,Hr3,Hr4,Hi1,Hi2,Hi3,Hi4,
     $                 ReF122la,RiF122la,ReF122lb,RiF122lb,
     $                 RF12OSre,RF12OSim,ReG122l,RiG122l,
     $                 ReG12t2l,RiG12t2l,reg12,rig12,
     $                 ref12a,rif12a,ref12b,rif12b,
     $                 reF1l,imF1l,imlogx2,relogx2,
     $                 CA,TR,CF,logmassratio
      real * 8 pi
      parameter (pi=3.141592653589793238462643383279502884197D0)

      integer numfer
      complex*16 Hc1,Hc2,Hc3,Hc4
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 

c     This is necessary to avoid SIGFPE. However there could be better ways to avoid this.
c     x is assigned a dummy value while the correct value for the case s < 4.0 is indeed calculated in the Re* Ri* functions
      if (s < 4.0d0 ) then
         x = 0.1
      else
         x = 4.d0/(Dsqrt(s-4.d0)+Dsqrt(s))**2
      endif

       call hplog(x,4,Hc1,Hc2,Hc3,Hc4, 
     $                      Hr1,Hr2,Hr3,Hr4,Hi1,Hi2,Hi3,Hi4,-1,1) 

c     Two-loop functions:
       ReF122la  = ref12a(x,s,Hr1,Hr2,Hr3,Hr4)
       RiF122la  = rif12a(x,s,Hr1,Hr2,Hr3,Hr4)
       ReF122lb  = ref12b(x,s,Hr1,Hr2,Hr3,Hr4)
       RiF122lb  = rif12b(x,s,Hr1,Hr2,Hr3,Hr4)

c      DRBar and MSbar for SM
       if ((massren.eq.1).or.(massren.eq.2)) then
          RF12OSre = ReF122la + ReF122lb*logmassratio
          RF12OSim = RiF122la + RiF122lb*logmassratio
c     On-Shell for SM
       else if (massren.eq.0) then
c     eq 15
          RF12OSre = ReF122la + 4.d0/3.d0*ReF122lb
          RF12OSim = RiF122la + 4.d0/3.d0*RiF122lb
       end if

       ReG122l  = reg12(x,s,Hr1,Hr2,Hr3,Hr4)
       RiG122l  = rig12(x,s,Hr1,Hr2,Hr3,Hr4)

       ReG12t2l = TR*( CF*RF12OSre + CA*ReG122l )
       RiG12t2l = TR*( CF*RF12OSim + CA*RiG122l )
       twoloop = ReG12t2l + dcmplx(0d0,1d0)*RiG12t2l
      
       return
       end  

c
c     Fermions - Two loop Functions
c

c     F_{1/2}**(2l,a):
      double precision function ref12a(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.3.4d0) then 
      var = - Dlog(1.d0-s/4.d0)
      ref12a = 
     $ + 1.d0 
     $ - 2.8148148148148148148d-1*var 
     $ + 2.3350970017636684303d-2*var**2 
     $ + 4.5026958931720836483d-2*var**3 
     $ - 1.1889873794635699398d-3*var**4 
     $ - 2.4475833065951941785d-3*var**5 
     $ + 6.1657048115034573021d-5*var**6 
     $ + 1.0208266733231549513d-4*var**7 
     $ - 2.8135477669666141225d-6*var**8 
     $ - 3.7361954170466570857d-6*var**9 
     $ + 1.1336251019911585631d-7*var**10 
     $ + 1.2662234883506781727d-7*var**11 
     $ - 4.1637586967361846133d-9*var**12 
     $ - 4.0813823137151174548d-9*var**13 
     $ + 1.4309407250502841616d-10*var**14 
     $ + 1.2700613600707097482d-10*var**15
     $ - 4.6844599447401368541d-12*var**16
     $ - 3.8506235769257602207d-12*var**17
     $ + 1.4786066707857725761d-13*var**18
     $ + 1.1442377015592939720d-13*var**19
     $ - 4.5374855042020696288d-15*var**20
       endif
       if(s.ge.3.4d0.AND.s.lt.4.d0) then  
       var = - Dlog(s/4.d0)
      ref12a = 
     $ + 3.0040290963093044911d0
     $ + 22.134413761170373827d0*var 
     $ + 100.19085282337782347d0*var**2 
     $ + 120.41498403284863764d0*var**3 
     $ + 83.515565363797341150d0*var**4 
     $ + 41.399320670378598273d0*var**5 
     $ + 16.155120666538672973d0*var**6 
     $ + 5.2327545742819423442d0*var**7 
     $ + 1.4535392196489384623d0*var**8 
     $ + 3.5388885516738708230d-1*var**9 
     $ + 7.6690647561326467514d-2*var**10 
     $ - Dsqrt(var)*(
     $ + 18.849555921538759431d0
     $ + 41.785489583964381794d0*var 
     $ + 92.466289110042469781d0*var**2 
     $ + 103.34582073034416237d0*var**3 
     $ + 73.616564026072819935d0*var**4 
     $ + 38.676750958355122410d0*var**5 
     $ + 16.243741072549717212d0*var**6 
     $ + 5.7231820529208336444d0*var**7 
     $ + 1.7454277225947180414d0*var**8 
     $ + 4.7085653615377182139d-1*var**9 
     $ + 1.1414157364277368468d-1*var**10 )
     $ + Dlog(var)*(
     $ - 9.8696044010893586188d0*var 
     $ - 1.6449340668482264365d0*var**2 
     $ + 9.5406175877197133315d0*var**3 
     $ + 11.471456861424893411d0*var**4 
     $ + 7.7272736045036922837d0*var**5 
     $ + 3.7987176872037956469d0*var**6 
     $ + 1.4999967333379824689d0*var**7 
     $ + 4.9997589743396814580d-1*var**8 
     $ + 1.4500554216047137430d-1*var**9 
     $ + 3.7348735861890670383d-2*var**10 )
     $ + Dsqrt(var)*Dlog(var)*(
     $ + 16.755160819145563938d0*var**2 
     $ + 25.411993909037438640d0*var**3 
     $ + 20.260779288151317346d0*var**4 
     $ + 11.275408744300700510d0*var**5 
     $ + 4.9024027304943311775d0*var**6 
     $ + 1.7670681012154063247d0*var**7 
     $ + 5.4738899481570033597d-1*var**8 
     $ + 1.4925412981654110016d-1*var**9 
     $ + 3.6434842589781479026d-2*var**10 )
       endif
       if(s.ge.4.d0) then
      ref12a = 
     $ + 264*z2/(1.d0+x)**4
     $ - 528*z2/(1.d0+x)**3
     $ + 288*z2/(1.d0+x)**2
     $ - 24*z2/(1.d0+x)
     $ - 276.d0/5*z2**2/(1.d0+x)**5
     $ + 138*z2**2/(1.d0+x)**4
     $ - 138*z2**2/(1.d0+x)**3
     $ + 69*z2**2/(1.d0+x)**2
     $ - 69.d0/5*z2**2/(1.d0+x)
     $ + 48*z3/(1.d0+x)**4
     $ - 96*z3/(1.d0+x)**3
     $ + 44*z3/(1.d0+x)**2
     $ + 4*z3/(1.d0+x)
     $ + 36.d0/(1.d0+x)**2
     $ - 36.d0/(1.d0+x)
     $ + 48*Hr1(-1)*z2/(1.d0+x)**4
     $ - 96*Hr1(-1)*z2/(1.d0+x)**3
     $ + 108*Hr1(-1)*z2/(1.d0+x)**2
     $ - 60*Hr1(-1)*z2/(1.d0+x)
     $ + 144*Hr1(0)*z2/(1.d0+x)**5
     $ - 248*Hr1(0)*z2/(1.d0+x)**4
     $ + 100*Hr1(0)*z2/(1.d0+x)**3
     $ - 10*Hr1(0)*z2/(1.d0+x)**2
     $ + 14*Hr1(0)*z2/(1.d0+x)
     $ + 64*Hr1(0)*z3/(1.d0+x)**5
     $ - 160*Hr1(0)*z3/(1.d0+x)**4
     $ + 160*Hr1(0)*z3/(1.d0+x)**3
     $ - 80*Hr1(0)*z3/(1.d0+x)**2
     $ + 16*Hr1(0)*z3/(1.d0+x)
     $ + 8*Hr1(0)/(1.d0+x)**3
     $ - 12*Hr1(0)/(1.d0+x)**2
     $ + 4*Hr1(0)/(1.d0+x)
     $ + 336*Hr2(0,-1)*z2/(1.d0+x)**5
     $ - 840*Hr2(0,-1)*z2/(1.d0+x)**4
     $ + 840*Hr2(0,-1)*z2/(1.d0+x)**3
     $ - 420*Hr2(0,-1)*z2/(1.d0+x)**2
     $ + 84*Hr2(0,-1)*z2/(1.d0+x)
     $ + 8*Hr2(0,0)*z2/(1.d0+x)**5
     $ - 20*Hr2(0,0)*z2/(1.d0+x)**4
     $ + 20*Hr2(0,0)*z2/(1.d0+x)**3
     $ - 10*Hr2(0,0)*z2/(1.d0+x)**2
     $ + 2*Hr2(0,0)*z2/(1.d0+x)
     $ - 88*Hr2(0,0)/(1.d0+x)**4
     $ + 176*Hr2(0,0)/(1.d0+x)**3
     $ - 96*Hr2(0,0)/(1.d0+x)**2
     $ + 8*Hr2(0,0)/(1.d0+x)
     $ - 192*Hr2(0,1)*z2/(1.d0+x)**5
     $ + 480*Hr2(0,1)*z2/(1.d0+x)**4
     $ - 480*Hr2(0,1)*z2/(1.d0+x)**3
     $ + 240*Hr2(0,1)*z2/(1.d0+x)**2
     $ - 48*Hr2(0,1)*z2/(1.d0+x)
     $ - 16*Hr3(-1,0,0)/(1.d0+x)**4
     $ + 32*Hr3(-1,0,0)/(1.d0+x)**3
     $ - 36*Hr3(-1,0,0)/(1.d0+x)**2
     $ + 20*Hr3(-1,0,0)/(1.d0+x)
     $ + 16*Hr3(0,-1,0)/(1.d0+x)**4
     $ - 32*Hr3(0,-1,0)/(1.d0+x)**3
     $ + 20*Hr3(0,-1,0)/(1.d0+x)**2
     $ - 4*Hr3(0,-1,0)/(1.d0+x)
     $ - 48*Hr3(0,0,0)/(1.d0+x)**5
     $ + 88*Hr3(0,0,0)/(1.d0+x)**4
     $ - 44*Hr3(0,0,0)/(1.d0+x)**3
     $ + 10*Hr3(0,0,0)/(1.d0+x)**2
     $ - 6*Hr3(0,0,0)/(1.d0+x)
     $ - 64*Hr3(0,1,0)/(1.d0+x)**4
     $ + 128*Hr3(0,1,0)/(1.d0+x)**3
     $ - 80*Hr3(0,1,0)/(1.d0+x)**2
     $ + 16*Hr3(0,1,0)/(1.d0+x)
     $ - 112*Hr4(0,-1,0,0)/(1.d0+x)**5
     $ + 280*Hr4(0,-1,0,0)/(1.d0+x)**4
     $ - 280*Hr4(0,-1,0,0)/(1.d0+x)**3
     $ + 140*Hr4(0,-1,0,0)/(1.d0+x)**2
     $ - 28*Hr4(0,-1,0,0)/(1.d0+x)
     $ + 32*Hr4(0,0,-1,0)/(1.d0+x)**5
     $ - 80*Hr4(0,0,-1,0)/(1.d0+x)**4
     $ + 80*Hr4(0,0,-1,0)/(1.d0+x)**3
     $ - 40*Hr4(0,0,-1,0)/(1.d0+x)**2
     $ + 8*Hr4(0,0,-1,0)/(1.d0+x)
     $ + 8*Hr4(0,0,0,0)/(1.d0+x)**5
     $ - 20*Hr4(0,0,0,0)/(1.d0+x)**4
     $ + 20*Hr4(0,0,0,0)/(1.d0+x)**3
     $ - 10*Hr4(0,0,0,0)/(1.d0+x)**2
     $ + 2*Hr4(0,0,0,0)/(1.d0+x)
     $ - 128*Hr4(0,0,1,0)/(1.d0+x)**5
     $ + 320*Hr4(0,0,1,0)/(1.d0+x)**4
     $ - 320*Hr4(0,0,1,0)/(1.d0+x)**3
     $ + 160*Hr4(0,0,1,0)/(1.d0+x)**2
     $ - 32*Hr4(0,0,1,0)/(1.d0+x)
     $ + 64*Hr4(0,1,0,0)/(1.d0+x)**5
     $ - 160*Hr4(0,1,0,0)/(1.d0+x)**4
     $ + 160*Hr4(0,1,0,0)/(1.d0+x)**3
     $ - 80*Hr4(0,1,0,0)/(1.d0+x)**2
     $ + 16*Hr4(0,1,0,0)/(1.d0+x)
       endif
      return
      end  

      double precision function ref12at(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.3.4d0) then 
      var = - Dlog(1.d0-s/4.d0)
      ref12at = 
     $ + 1.d0 
     $ - 2.8148148148148148148d-1*var 
     $ + 2.3350970017636684303d-2*var**2 
     $ + 4.5026958931720836483d-2*var**3 
     $ - 1.1889873794635699398d-3*var**4 
     $ - 2.4475833065951941785d-3*var**5 
     $ + 6.1657048115034573021d-5*var**6 
     $ + 1.0208266733231549513d-4*var**7 
     $ - 2.8135477669666141225d-6*var**8 
     $ - 3.7361954170466570857d-6*var**9 
     $ + 1.1336251019911585631d-7*var**10 
     $ + 1.2662234883506781727d-7*var**11 
     $ - 4.1637586967361846133d-9*var**12 
     $ - 4.0813823137151174548d-9*var**13 
     $ + 1.4309407250502841616d-10*var**14 
     $ + 1.2700613600707097482d-10*var**15
     $ - 4.6844599447401368541d-12*var**16
     $ - 3.8506235769257602207d-12*var**17
     $ + 1.4786066707857725761d-13*var**18
     $ + 1.1442377015592939720d-13*var**19
     $ - 4.5374855042020696288d-15*var**20
       endif
       if(s.ge.3.4d0.AND.s.lt.4.d0) then  
       var = - Dlog(s/4.d0)
      ref12at = 
     $ + 3.0040290963093044911d0
     $ + 22.134413761170373827d0*var 
     $ + 100.19085282337782347d0*var**2 
     $ + 120.41498403284863764d0*var**3 
     $ + 83.515565363797341150d0*var**4 
     $ + 41.399320670378598273d0*var**5 
     $ + 16.155120666538672973d0*var**6 
     $ + 5.2327545742819423442d0*var**7 
     $ + 1.4535392196489384623d0*var**8 
     $ + 3.5388885516738708230d-1*var**9 
     $ + 7.6690647561326467514d-2*var**10 
     $ - Dsqrt(var)*(
     $ + 18.849555921538759431d0
     $ + 41.785489583964381794d0*var 
     $ + 92.466289110042469781d0*var**2 
     $ + 103.34582073034416237d0*var**3 
     $ + 73.616564026072819935d0*var**4 
     $ + 38.676750958355122410d0*var**5 
     $ + 16.243741072549717212d0*var**6 
     $ + 5.7231820529208336444d0*var**7 
     $ + 1.7454277225947180414d0*var**8 
     $ + 4.7085653615377182139d-1*var**9 
     $ + 1.1414157364277368468d-1*var**10 )
     $ + Dlog(var)*(
     $ - 9.8696044010893586188d0*var 
     $ - 1.6449340668482264365d0*var**2 
     $ + 9.5406175877197133315d0*var**3 
     $ + 11.471456861424893411d0*var**4 
     $ + 7.7272736045036922837d0*var**5 
     $ + 3.7987176872037956469d0*var**6 
     $ + 1.4999967333379824689d0*var**7 
     $ + 4.9997589743396814580d-1*var**8 
     $ + 1.4500554216047137430d-1*var**9 
     $ + 3.7348735861890670383d-2*var**10 )
     $ + Dsqrt(var)*Dlog(var)*(
     $ + 16.755160819145563938d0*var**2 
     $ + 25.411993909037438640d0*var**3 
     $ + 20.260779288151317346d0*var**4 
     $ + 11.275408744300700510d0*var**5 
     $ + 4.9024027304943311775d0*var**6 
     $ + 1.7670681012154063247d0*var**7 
     $ + 5.4738899481570033597d-1*var**8 
     $ + 1.4925412981654110016d-1*var**9 
     $ + 3.6434842589781479026d-2*var**10 )
       endif
       if(s.ge.4.d0) then
      ref12at = 
     $ + 264*z2/(1.d0+x)**4
     $ - 528*z2/(1.d0+x)**3
     $ + 288*z2/(1.d0+x)**2
     $ - 24*z2/(1.d0+x)
     $ - 276.d0/5*z2**2/(1.d0+x)**5
     $ + 138*z2**2/(1.d0+x)**4
     $ - 138*z2**2/(1.d0+x)**3
     $ + 69*z2**2/(1.d0+x)**2
     $ - 69.d0/5*z2**2/(1.d0+x)
     $ + 48*z3/(1.d0+x)**4
     $ - 96*z3/(1.d0+x)**3
     $ + 44*z3/(1.d0+x)**2
     $ + 4*z3/(1.d0+x)
     $ + 36.d0/(1.d0+x)**2
     $ - 36.d0/(1.d0+x)
     $ + 48*Hr1(-1)*z2/(1.d0+x)**4
     $ - 96*Hr1(-1)*z2/(1.d0+x)**3
     $ + 108*Hr1(-1)*z2/(1.d0+x)**2
     $ - 60*Hr1(-1)*z2/(1.d0+x)
     $ + 144*Hr1(0)*z2/(1.d0+x)**5
     $ - 248*Hr1(0)*z2/(1.d0+x)**4
     $ + 100*Hr1(0)*z2/(1.d0+x)**3
     $ - 10*Hr1(0)*z2/(1.d0+x)**2
     $ + 14*Hr1(0)*z2/(1.d0+x)
     $ + 64*Hr1(0)*z3/(1.d0+x)**5
     $ - 160*Hr1(0)*z3/(1.d0+x)**4
     $ + 160*Hr1(0)*z3/(1.d0+x)**3
     $ - 80*Hr1(0)*z3/(1.d0+x)**2
     $ + 16*Hr1(0)*z3/(1.d0+x)
     $ + 8*Hr1(0)/(1.d0+x)**3
     $ - 12*Hr1(0)/(1.d0+x)**2
     $ + 4*Hr1(0)/(1.d0+x)
     $ + 336*Hr2(0,-1)*z2/(1.d0+x)**5
     $ - 840*Hr2(0,-1)*z2/(1.d0+x)**4
     $ + 840*Hr2(0,-1)*z2/(1.d0+x)**3
     $ - 420*Hr2(0,-1)*z2/(1.d0+x)**2
     $ + 84*Hr2(0,-1)*z2/(1.d0+x)
     $ + 8*Hr2(0,0)*z2/(1.d0+x)**5
     $ - 20*Hr2(0,0)*z2/(1.d0+x)**4
     $ + 20*Hr2(0,0)*z2/(1.d0+x)**3
     $ - 10*Hr2(0,0)*z2/(1.d0+x)**2
     $ + 2*Hr2(0,0)*z2/(1.d0+x)
     $ - 88*Hr2(0,0)/(1.d0+x)**4
     $ + 176*Hr2(0,0)/(1.d0+x)**3
     $ - 96*Hr2(0,0)/(1.d0+x)**2
     $ + 8*Hr2(0,0)/(1.d0+x)
     $ - 192*Hr2(0,1)*z2/(1.d0+x)**5
     $ + 480*Hr2(0,1)*z2/(1.d0+x)**4
     $ - 480*Hr2(0,1)*z2/(1.d0+x)**3
     $ + 240*Hr2(0,1)*z2/(1.d0+x)**2
     $ - 48*Hr2(0,1)*z2/(1.d0+x)
     $ - 16*Hr3(-1,0,0)/(1.d0+x)**4
     $ + 32*Hr3(-1,0,0)/(1.d0+x)**3
     $ - 36*Hr3(-1,0,0)/(1.d0+x)**2
     $ + 20*Hr3(-1,0,0)/(1.d0+x)
     $ + 16*Hr3(0,-1,0)/(1.d0+x)**4
     $ - 32*Hr3(0,-1,0)/(1.d0+x)**3
     $ + 20*Hr3(0,-1,0)/(1.d0+x)**2
     $ - 4*Hr3(0,-1,0)/(1.d0+x)
     $ - 48*Hr3(0,0,0)/(1.d0+x)**5
     $ + 88*Hr3(0,0,0)/(1.d0+x)**4
     $ - 44*Hr3(0,0,0)/(1.d0+x)**3
     $ + 10*Hr3(0,0,0)/(1.d0+x)**2
     $ - 6*Hr3(0,0,0)/(1.d0+x)
     $ - 64*Hr3(0,1,0)/(1.d0+x)**4
     $ + 128*Hr3(0,1,0)/(1.d0+x)**3
     $ - 80*Hr3(0,1,0)/(1.d0+x)**2
     $ + 16*Hr3(0,1,0)/(1.d0+x)
     $ - 112*Hr4(0,-1,0,0)/(1.d0+x)**5
     $ + 280*Hr4(0,-1,0,0)/(1.d0+x)**4
     $ - 280*Hr4(0,-1,0,0)/(1.d0+x)**3
     $ + 140*Hr4(0,-1,0,0)/(1.d0+x)**2
     $ - 28*Hr4(0,-1,0,0)/(1.d0+x)
     $ + 32*Hr4(0,0,-1,0)/(1.d0+x)**5
     $ - 80*Hr4(0,0,-1,0)/(1.d0+x)**4
     $ + 80*Hr4(0,0,-1,0)/(1.d0+x)**3
     $ - 40*Hr4(0,0,-1,0)/(1.d0+x)**2
     $ + 8*Hr4(0,0,-1,0)/(1.d0+x)
     $ + 8*Hr4(0,0,0,0)/(1.d0+x)**5
     $ - 20*Hr4(0,0,0,0)/(1.d0+x)**4
     $ + 20*Hr4(0,0,0,0)/(1.d0+x)**3
     $ - 10*Hr4(0,0,0,0)/(1.d0+x)**2
     $ + 2*Hr4(0,0,0,0)/(1.d0+x)
     $ - 128*Hr4(0,0,1,0)/(1.d0+x)**5
     $ + 320*Hr4(0,0,1,0)/(1.d0+x)**4
     $ - 320*Hr4(0,0,1,0)/(1.d0+x)**3
     $ + 160*Hr4(0,0,1,0)/(1.d0+x)**2
     $ - 32*Hr4(0,0,1,0)/(1.d0+x)
     $ + 64*Hr4(0,1,0,0)/(1.d0+x)**5
     $ - 160*Hr4(0,1,0,0)/(1.d0+x)**4
     $ + 160*Hr4(0,1,0,0)/(1.d0+x)**3
     $ - 80*Hr4(0,1,0,0)/(1.d0+x)**2
     $ + 16*Hr4(0,1,0,0)/(1.d0+x)
       endif
      return
      end

      double precision function ref12ab(x,s,HAr1,HAr2,HAr3,HAr4)
      implicit double precision (a-h,o-z) 
      dimension HAc1(-1:1),HAc2(-1:1,-1:1),HAc3(-1:1,-1:1,-1:1), 
     $          HAc4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAr1(-1:1),HAr2(-1:1,-1:1),HAr3(-1:1,-1:1,-1:1), 
     $          HAr4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAi1(-1:1),HAi2(-1:1,-1:1),HAi3(-1:1,-1:1,-1:1), 
     $          HAi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.3.4d0) then 
      var = - Dlog(1.d0-s/4.d0)
      ref12ab = 
     $ + 1.d0 
     $ - 2.8148148148148148148d-1*var 
     $ + 2.3350970017636684303d-2*var**2 
     $ + 4.5026958931720836483d-2*var**3 
     $ - 1.1889873794635699398d-3*var**4 
     $ - 2.4475833065951941785d-3*var**5 
     $ + 6.1657048115034573021d-5*var**6 
     $ + 1.0208266733231549513d-4*var**7 
     $ - 2.8135477669666141225d-6*var**8 
     $ - 3.7361954170466570857d-6*var**9 
     $ + 1.1336251019911585631d-7*var**10 
     $ + 1.2662234883506781727d-7*var**11 
     $ - 4.1637586967361846133d-9*var**12 
     $ - 4.0813823137151174548d-9*var**13 
     $ + 1.4309407250502841616d-10*var**14 
     $ + 1.2700613600707097482d-10*var**15
     $ - 4.6844599447401368541d-12*var**16
     $ - 3.8506235769257602207d-12*var**17
     $ + 1.4786066707857725761d-13*var**18
     $ + 1.1442377015592939720d-13*var**19
     $ - 4.5374855042020696288d-15*var**20
       endif
       if(s.ge.3.4d0.AND.s.lt.4.d0) then  
       var = - Dlog(s/4.d0)
      ref12ab = 
     $ + 3.0040290963093044911d0
     $ + 22.134413761170373827d0*var 
     $ + 100.19085282337782347d0*var**2 
     $ + 120.41498403284863764d0*var**3 
     $ + 83.515565363797341150d0*var**4 
     $ + 41.399320670378598273d0*var**5 
     $ + 16.155120666538672973d0*var**6 
     $ + 5.2327545742819423442d0*var**7 
     $ + 1.4535392196489384623d0*var**8 
     $ + 3.5388885516738708230d-1*var**9 
     $ + 7.6690647561326467514d-2*var**10 
     $ - Dsqrt(var)*(
     $ + 18.849555921538759431d0
     $ + 41.785489583964381794d0*var 
     $ + 92.466289110042469781d0*var**2 
     $ + 103.34582073034416237d0*var**3 
     $ + 73.616564026072819935d0*var**4 
     $ + 38.676750958355122410d0*var**5 
     $ + 16.243741072549717212d0*var**6 
     $ + 5.7231820529208336444d0*var**7 
     $ + 1.7454277225947180414d0*var**8 
     $ + 4.7085653615377182139d-1*var**9 
     $ + 1.1414157364277368468d-1*var**10 )
     $ + Dlog(var)*(
     $ - 9.8696044010893586188d0*var 
     $ - 1.6449340668482264365d0*var**2 
     $ + 9.5406175877197133315d0*var**3 
     $ + 11.471456861424893411d0*var**4 
     $ + 7.7272736045036922837d0*var**5 
     $ + 3.7987176872037956469d0*var**6 
     $ + 1.4999967333379824689d0*var**7 
     $ + 4.9997589743396814580d-1*var**8 
     $ + 1.4500554216047137430d-1*var**9 
     $ + 3.7348735861890670383d-2*var**10 )
     $ + Dsqrt(var)*Dlog(var)*(
     $ + 16.755160819145563938d0*var**2 
     $ + 25.411993909037438640d0*var**3 
     $ + 20.260779288151317346d0*var**4 
     $ + 11.275408744300700510d0*var**5 
     $ + 4.9024027304943311775d0*var**6 
     $ + 1.7670681012154063247d0*var**7 
     $ + 5.4738899481570033597d-1*var**8 
     $ + 1.4925412981654110016d-1*var**9 
     $ + 3.6434842589781479026d-2*var**10 )
       endif
       if(s.ge.4.d0) then
      ref12ab = 
     $ + 264*z2/(1.d0+x)**4
     $ - 528*z2/(1.d0+x)**3
     $ + 288*z2/(1.d0+x)**2
     $ - 24*z2/(1.d0+x)
     $ - 276.d0/5*z2**2/(1.d0+x)**5
     $ + 138*z2**2/(1.d0+x)**4
     $ - 138*z2**2/(1.d0+x)**3
     $ + 69*z2**2/(1.d0+x)**2
     $ - 69.d0/5*z2**2/(1.d0+x)
     $ + 48*z3/(1.d0+x)**4
     $ - 96*z3/(1.d0+x)**3
     $ + 44*z3/(1.d0+x)**2
     $ + 4*z3/(1.d0+x)
     $ + 36.d0/(1.d0+x)**2
     $ - 36.d0/(1.d0+x)
     $ + 48*HAr1(-1)*z2/(1.d0+x)**4
     $ - 96*HAr1(-1)*z2/(1.d0+x)**3
     $ + 108*HAr1(-1)*z2/(1.d0+x)**2
     $ - 60*HAr1(-1)*z2/(1.d0+x)
     $ + 144*HAr1(0)*z2/(1.d0+x)**5
     $ - 248*HAr1(0)*z2/(1.d0+x)**4
     $ + 100*HAr1(0)*z2/(1.d0+x)**3
     $ - 10*HAr1(0)*z2/(1.d0+x)**2
     $ + 14*HAr1(0)*z2/(1.d0+x)
     $ + 64*HAr1(0)*z3/(1.d0+x)**5
     $ - 160*HAr1(0)*z3/(1.d0+x)**4
     $ + 160*HAr1(0)*z3/(1.d0+x)**3
     $ - 80*HAr1(0)*z3/(1.d0+x)**2
     $ + 16*HAr1(0)*z3/(1.d0+x)
     $ + 8*HAr1(0)/(1.d0+x)**3
     $ - 12*HAr1(0)/(1.d0+x)**2
     $ + 4*HAr1(0)/(1.d0+x)
     $ + 336*HAr2(0,-1)*z2/(1.d0+x)**5
     $ - 840*HAr2(0,-1)*z2/(1.d0+x)**4
     $ + 840*HAr2(0,-1)*z2/(1.d0+x)**3
     $ - 420*HAr2(0,-1)*z2/(1.d0+x)**2
     $ + 84*HAr2(0,-1)*z2/(1.d0+x)
     $ + 8*HAr2(0,0)*z2/(1.d0+x)**5
     $ - 20*HAr2(0,0)*z2/(1.d0+x)**4
     $ + 20*HAr2(0,0)*z2/(1.d0+x)**3
     $ - 10*HAr2(0,0)*z2/(1.d0+x)**2
     $ + 2*HAr2(0,0)*z2/(1.d0+x)
     $ - 88*HAr2(0,0)/(1.d0+x)**4
     $ + 176*HAr2(0,0)/(1.d0+x)**3
     $ - 96*HAr2(0,0)/(1.d0+x)**2
     $ + 8*HAr2(0,0)/(1.d0+x)
     $ - 192*HAr2(0,1)*z2/(1.d0+x)**5
     $ + 480*HAr2(0,1)*z2/(1.d0+x)**4
     $ - 480*HAr2(0,1)*z2/(1.d0+x)**3
     $ + 240*HAr2(0,1)*z2/(1.d0+x)**2*l
     $ - 48*HAr2(0,1)*z2/(1.d0+x)
     $ - 16*HAr3(-1,0,0)/(1.d0+x)**4
     $ + 32*HAr3(-1,0,0)/(1.d0+x)**3
     $ - 36*HAr3(-1,0,0)/(1.d0+x)**2
     $ + 20*HAr3(-1,0,0)/(1.d0+x)
     $ + 16*HAr3(0,-1,0)/(1.d0+x)**4
     $ - 32*HAr3(0,-1,0)/(1.d0+x)**3
     $ + 20*HAr3(0,-1,0)/(1.d0+x)**2
     $ - 4*HAr3(0,-1,0)/(1.d0+x)
     $ - 48*HAr3(0,0,0)/(1.d0+x)**5
     $ + 88*HAr3(0,0,0)/(1.d0+x)**4
     $ - 44*HAr3(0,0,0)/(1.d0+x)**3
     $ + 10*HAr3(0,0,0)/(1.d0+x)**2
     $ - 6*HAr3(0,0,0)/(1.d0+x)
     $ - 64*HAr3(0,1,0)/(1.d0+x)**4
     $ + 128*HAr3(0,1,0)/(1.d0+x)**3
     $ - 80*HAr3(0,1,0)/(1.d0+x)**2
     $ + 16*HAr3(0,1,0)/(1.d0+x)
     $ - 112*HAr4(0,-1,0,0)/(1.d0+x)**5
     $ + 280*HAr4(0,-1,0,0)/(1.d0+x)**4
     $ - 280*HAr4(0,-1,0,0)/(1.d0+x)**3
     $ + 140*HAr4(0,-1,0,0)/(1.d0+x)**2
     $ - 28*HAr4(0,-1,0,0)/(1.d0+x)
     $ + 32*HAr4(0,0,-1,0)/(1.d0+x)**5
     $ - 80*HAr4(0,0,-1,0)/(1.d0+x)**4
     $ + 80*HAr4(0,0,-1,0)/(1.d0+x)**3
     $ - 40*HAr4(0,0,-1,0)/(1.d0+x)**2
     $ + 8*HAr4(0,0,-1,0)/(1.d0+x)
     $ + 8*HAr4(0,0,0,0)/(1.d0+x)**5
     $ - 20*HAr4(0,0,0,0)/(1.d0+x)**4
     $ + 20*HAr4(0,0,0,0)/(1.d0+x)**3
     $ - 10*HAr4(0,0,0,0)/(1.d0+x)**2
     $ + 2*HAr4(0,0,0,0)/(1.d0+x)
     $ - 128*HAr4(0,0,1,0)/(1.d0+x)**5
     $ + 320*HAr4(0,0,1,0)/(1.d0+x)**4
     $ - 320*HAr4(0,0,1,0)/(1.d0+x)**3
     $ + 160*HAr4(0,0,1,0)/(1.d0+x)**2
     $ - 32*HAr4(0,0,1,0)/(1.d0+x)
     $ + 64*HAr4(0,1,0,0)/(1.d0+x)**5
     $ - 160*HAr4(0,1,0,0)/(1.d0+x)**4
     $ + 160*HAr4(0,1,0,0)/(1.d0+x)**3
     $ - 80*HAr4(0,1,0,0)/(1.d0+x)**2
     $ + 16*HAr4(0,1,0,0)/(1.d0+x)
       endif
      return
      end  

      double precision function rif12a(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rif12a = 0.d0
       endif
       if(s.ge.4.d0) then
      rif12a = pi * (
     $ + 48*z2/(1.d0+x)**5
     $ - 72*z2/(1.d0+x)**4
     $ + 12*z2/(1.d0+x)**3
     $ + 10*z2/(1.d0+x)**2
     $ + 2*z2/(1.d0+x)
     $ + 64*z3/(1.d0+x)**5
     $ - 160*z3/(1.d0+x)**4
     $ + 160*z3/(1.d0+x)**3
     $ - 80*z3/(1.d0+x)**2
     $ + 16*z3/(1.d0+x)
     $ + 8.d0/(1.d0+x)**3
     $ - 12.d0/(1.d0+x)**2
     $ + 4.d0/(1.d0+x)
     $ + 24*Hr1(0)*z2/(1.d0+x)**5
     $ - 60*Hr1(0)*z2/(1.d0+x)**4
     $ + 60*Hr1(0)*z2/(1.d0+x)**3
     $ - 30*Hr1(0)*z2/(1.d0+x)**2
     $ + 6*Hr1(0)*z2/(1.d0+x)
     $ - 88*Hr1(0)/(1.d0+x)**4
     $ + 176*Hr1(0)/(1.d0+x)**3
     $ - 96*Hr1(0)/(1.d0+x)**2
     $ + 8*Hr1(0)/(1.d0+x)
     $ - 16*Hr2(-1,0)/(1.d0+x)**4
     $ + 32*Hr2(-1,0)/(1.d0+x)**3
     $ - 36*Hr2(-1,0)/(1.d0+x)**2
     $ + 20*Hr2(-1,0)/(1.d0+x)
     $ + 16*Hr2(0,-1)/(1.d0+x)**4
     $ - 32*Hr2(0,-1)/(1.d0+x)**3
     $ + 20*Hr2(0,-1)/(1.d0+x)**2
     $ - 4*Hr2(0,-1)/(1.d0+x)
     $ - 48*Hr2(0,0)/(1.d0+x)**5
     $ + 88*Hr2(0,0)/(1.d0+x)**4
     $ - 44*Hr2(0,0)/(1.d0+x)**3
     $ + 10*Hr2(0,0)/(1.d0+x)**2
     $ - 6*Hr2(0,0)/(1.d0+x)
     $ - 64*Hr2(0,1)/(1.d0+x)**4
     $ + 128*Hr2(0,1)/(1.d0+x)**3
     $ - 80*Hr2(0,1)/(1.d0+x)**2
     $ + 16*Hr2(0,1)/(1.d0+x)
     $ - 112*Hr3(0,-1,0)/(1.d0+x)**5
     $ + 280*Hr3(0,-1,0)/(1.d0+x)**4
     $ - 280*Hr3(0,-1,0)/(1.d0+x)**3
     $ + 140*Hr3(0,-1,0)/(1.d0+x)**2
     $ - 28*Hr3(0,-1,0)/(1.d0+x)
     $ + 32*Hr3(0,0,-1)/(1.d0+x)**5
     $ - 80*Hr3(0,0,-1)/(1.d0+x)**4
     $ + 80*Hr3(0,0,-1)/(1.d0+x)**3
     $ - 40*Hr3(0,0,-1)/(1.d0+x)**2
     $ + 8*Hr3(0,0,-1)/(1.d0+x)
     $ + 8*Hr3(0,0,0)/(1.d0+x)**5
     $ - 20*Hr3(0,0,0)/(1.d0+x)**4
     $ + 20*Hr3(0,0,0)/(1.d0+x)**3
     $ - 10*Hr3(0,0,0)/(1.d0+x)**2
     $ + 2*Hr3(0,0,0)/(1.d0+x)
     $ - 128*Hr3(0,0,1)/(1.d0+x)**5
     $ + 320*Hr3(0,0,1)/(1.d0+x)**4
     $ - 320*Hr3(0,0,1)/(1.d0+x)**3
     $ + 160*Hr3(0,0,1)/(1.d0+x)**2
     $ - 32*Hr3(0,0,1)/(1.d0+x)
     $ + 64*Hr3(0,1,0)/(1.d0+x)**5
     $ - 160*Hr3(0,1,0)/(1.d0+x)**4
     $ + 160*Hr3(0,1,0)/(1.d0+x)**3
     $ - 80*Hr3(0,1,0)/(1.d0+x)**2
     $ + 16*Hr3(0,1,0)/(1.d0+x) )
       endif
      return
      end  

      double precision function rif12at(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rif12at = 0.d0
       endif
       if(s.ge.4.d0) then
      rif12at = pi * (
     $ + 48*z2/(1.d0+x)**5
     $ - 72*z2/(1.d0+x)**4
     $ + 12*z2/(1.d0+x)**3
     $ + 10*z2/(1.d0+x)**2
     $ + 2*z2/(1.d0+x)
     $ + 64*z3/(1.d0+x)**5
     $ - 160*z3/(1.d0+x)**4
     $ + 160*z3/(1.d0+x)**3
     $ - 80*z3/(1.d0+x)**2
     $ + 16*z3/(1.d0+x)
     $ + 8.d0/(1.d0+x)**3
     $ - 12.d0/(1.d0+x)**2
     $ + 4.d0/(1.d0+x)
     $ + 24*Hr1(0)*z2/(1.d0+x)**5
     $ - 60*Hr1(0)*z2/(1.d0+x)**4
     $ + 60*Hr1(0)*z2/(1.d0+x)**3
     $ - 30*Hr1(0)*z2/(1.d0+x)**2
     $ + 6*Hr1(0)*z2/(1.d0+x)
     $ - 88*Hr1(0)/(1.d0+x)**4
     $ + 176*Hr1(0)/(1.d0+x)**3
     $ - 96*Hr1(0)/(1.d0+x)**2
     $ + 8*Hr1(0)/(1.d0+x)
     $ - 16*Hr2(-1,0)/(1.d0+x)**4
     $ + 32*Hr2(-1,0)/(1.d0+x)**3
     $ - 36*Hr2(-1,0)/(1.d0+x)**2
     $ + 20*Hr2(-1,0)/(1.d0+x)
     $ + 16*Hr2(0,-1)/(1.d0+x)**4
     $ - 32*Hr2(0,-1)/(1.d0+x)**3
     $ + 20*Hr2(0,-1)/(1.d0+x)**2
     $ - 4*Hr2(0,-1)/(1.d0+x)
     $ - 48*Hr2(0,0)/(1.d0+x)**5
     $ + 88*Hr2(0,0)/(1.d0+x)**4
     $ - 44*Hr2(0,0)/(1.d0+x)**3
     $ + 10*Hr2(0,0)/(1.d0+x)**2
     $ - 6*Hr2(0,0)/(1.d0+x)
     $ - 64*Hr2(0,1)/(1.d0+x)**4
     $ + 128*Hr2(0,1)/(1.d0+x)**3
     $ - 80*Hr2(0,1)/(1.d0+x)**2
     $ + 16*Hr2(0,1)/(1.d0+x)
     $ - 112*Hr3(0,-1,0)/(1.d0+x)**5
     $ + 280*Hr3(0,-1,0)/(1.d0+x)**4
     $ - 280*Hr3(0,-1,0)/(1.d0+x)**3
     $ + 140*Hr3(0,-1,0)/(1.d0+x)**2
     $ - 28*Hr3(0,-1,0)/(1.d0+x)
     $ + 32*Hr3(0,0,-1)/(1.d0+x)**5
     $ - 80*Hr3(0,0,-1)/(1.d0+x)**4
     $ + 80*Hr3(0,0,-1)/(1.d0+x)**3
     $ - 40*Hr3(0,0,-1)/(1.d0+x)**2
     $ + 8*Hr3(0,0,-1)/(1.d0+x)
     $ + 8*Hr3(0,0,0)/(1.d0+x)**5
     $ - 20*Hr3(0,0,0)/(1.d0+x)**4
     $ + 20*Hr3(0,0,0)/(1.d0+x)**3
     $ - 10*Hr3(0,0,0)/(1.d0+x)**2
     $ + 2*Hr3(0,0,0)/(1.d0+x)
     $ - 128*Hr3(0,0,1)/(1.d0+x)**5
     $ + 320*Hr3(0,0,1)/(1.d0+x)**4
     $ - 320*Hr3(0,0,1)/(1.d0+x)**3
     $ + 160*Hr3(0,0,1)/(1.d0+x)**2
     $ - 32*Hr3(0,0,1)/(1.d0+x)
     $ + 64*Hr3(0,1,0)/(1.d0+x)**5
     $ - 160*Hr3(0,1,0)/(1.d0+x)**4
     $ + 160*Hr3(0,1,0)/(1.d0+x)**3
     $ - 80*Hr3(0,1,0)/(1.d0+x)**2
     $ + 16*Hr3(0,1,0)/(1.d0+x) )
       endif
      return
      end  

      double precision function rif12ab(x,s,HAr1,HAr2,HAr3,HAr4)
      implicit double precision (a-h,o-z) 
      dimension HAc1(-1:1),HAc2(-1:1,-1:1),HAc3(-1:1,-1:1,-1:1), 
     $          HAc4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAr1(-1:1),HAr2(-1:1,-1:1),HAr3(-1:1,-1:1,-1:1), 
     $          HAr4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAi1(-1:1),HAi2(-1:1,-1:1),HAi3(-1:1,-1:1,-1:1), 
     $          HAi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rif12ab = 0.d0
       endif
       if(s.ge.4.d0) then
      rif12ab = pi * (
     $ + 48*z2/(1.d0+x)**5
     $ - 72*z2/(1.d0+x)**4
     $ + 12*z2/(1.d0+x)**3
     $ + 10*z2/(1.d0+x)**2
     $ + 2*z2/(1.d0+x)
     $ + 64*z3/(1.d0+x)**5
     $ - 160*z3/(1.d0+x)**4
     $ + 160*z3/(1.d0+x)**3
     $ - 80*z3/(1.d0+x)**2
     $ + 16*z3/(1.d0+x)
     $ + 8.d0/(1.d0+x)**3
     $ - 12.d0/(1.d0+x)**2
     $ + 4.d0/(1.d0+x)
     $ + 24*HAr1(0)*z2/(1.d0+x)**5
     $ - 60*HAr1(0)*z2/(1.d0+x)**4
     $ + 60*HAr1(0)*z2/(1.d0+x)**3
     $ - 30*HAr1(0)*z2/(1.d0+x)**2
     $ + 6*HAr1(0)*z2/(1.d0+x)
     $ - 88*HAr1(0)/(1.d0+x)**4
     $ + 176*HAr1(0)/(1.d0+x)**3
     $ - 96*HAr1(0)/(1.d0+x)**2
     $ + 8*HAr1(0)/(1.d0+x)
     $ - 16*HAr2(-1,0)/(1.d0+x)**4
     $ + 32*HAr2(-1,0)/(1.d0+x)**3
     $ - 36*HAr2(-1,0)/(1.d0+x)**2
     $ + 20*HAr2(-1,0)/(1.d0+x)
     $ + 16*HAr2(0,-1)/(1.d0+x)**4
     $ - 32*HAr2(0,-1)/(1.d0+x)**3
     $ + 20*HAr2(0,-1)/(1.d0+x)**2
     $ - 4*HAr2(0,-1)/(1.d0+x)
     $ - 48*HAr2(0,0)/(1.d0+x)**5
     $ + 88*HAr2(0,0)/(1.d0+x)**4
     $ - 44*HAr2(0,0)/(1.d0+x)**3
     $ + 10*HAr2(0,0)/(1.d0+x)**2
     $ - 6*HAr2(0,0)/(1.d0+x)
     $ - 64*HAr2(0,1)/(1.d0+x)**4
     $ + 128*HAr2(0,1)/(1.d0+x)**3
     $ - 80*HAr2(0,1)/(1.d0+x)**2
     $ + 16*HAr2(0,1)/(1.d0+x)
     $ - 112*HAr3(0,-1,0)/(1.d0+x)**5
     $ + 280*HAr3(0,-1,0)/(1.d0+x)**4
     $ - 280*HAr3(0,-1,0)/(1.d0+x)**3
     $ + 140*HAr3(0,-1,0)/(1.d0+x)**2
     $ - 28*HAr3(0,-1,0)/(1.d0+x)
     $ + 32*HAr3(0,0,-1)/(1.d0+x)**5
     $ - 80*HAr3(0,0,-1)/(1.d0+x)**4
     $ + 80*HAr3(0,0,-1)/(1.d0+x)**3
     $ - 40*HAr3(0,0,-1)/(1.d0+x)**2
     $ + 8*HAr3(0,0,-1)/(1.d0+x)
     $ + 8*HAr3(0,0,0)/(1.d0+x)**5
     $ - 20*HAr3(0,0,0)/(1.d0+x)**4
     $ + 20*HAr3(0,0,0)/(1.d0+x)**3
     $ - 10*HAr3(0,0,0)/(1.d0+x)**2
     $ + 2*HAr3(0,0,0)/(1.d0+x)
     $ - 128*HAr3(0,0,1)/(1.d0+x)**5
     $ + 320*HAr3(0,0,1)/(1.d0+x)**4
     $ - 320*HAr3(0,0,1)/(1.d0+x)**3
     $ + 160*HAr3(0,0,1)/(1.d0+x)**2
     $ - 32*HAr3(0,0,1)/(1.d0+x)
     $ + 64*HAr3(0,1,0)/(1.d0+x)**5
     $ - 160*HAr3(0,1,0)/(1.d0+x)**4
     $ + 160*HAr3(0,1,0)/(1.d0+x)**3
     $ - 80*HAr3(0,1,0)/(1.d0+x)**2
     $ + 16*HAr3(0,1,0)/(1.d0+x) )
       endif
      return
      end

c     F_{1/2}**(2l,b):
      double precision function ref12b(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
        xe = Dsqrt(s)/Dsqrt(4.d0-s)
	phy = DATAN(xe)
      ref12b =  phy/Dsqrt(s*(4.d0-s)) * (
     $ - 12.d0
     $ + 48.d0/s )
     $ + phy**2 * (
     $ - 96.d0/s**2
     $ + 12.d0/s )
     $ + 12.d0/s
       endif
       if(s.ge.4.d0) then
      ref12b = 
     $ - 144*z2/(1.d0+x)**4
     $ + 288*z2/(1.d0+x)**3
     $ - 162*z2/(1.d0+x)**2
     $ + 18*z2/(1.d0+x)
     $ - 12.d0/(1.d0+x)**2
     $ + 12.d0/(1.d0+x)
     $ + 12*Hr1(0)/(1.d0+x)**3
     $ - 18*Hr1(0)/(1.d0+x)**2
     $ + 6*Hr1(0)/(1.d0+x)
     $ + 48*Hr2(0,0)/(1.d0+x)**4
     $ - 96*Hr2(0,0)/(1.d0+x)**3
     $ + 54*Hr2(0,0)/(1.d0+x)**2
     $ - 6*Hr2(0,0)/(1.d0+x)
       endif
      return
      end  

      double precision function ref12bt(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
        xe = Dsqrt(s)/Dsqrt(4.d0-s)
	phy = DATAN(xe)
      ref12bt =  phy/Dsqrt(s*(4.d0-s)) * (
     $ - 12.d0
     $ + 48.d0/s )
     $ + phy**2 * (
     $ - 96.d0/s**2
     $ + 12.d0/s )
     $ + 12.d0/s
       endif
       if(s.ge.4.d0) then
      ref12bt = 
     $ - 144*z2/(1.d0+x)**4
     $ + 288*z2/(1.d0+x)**3
     $ - 162*z2/(1.d0+x)**2
     $ + 18*z2/(1.d0+x)
     $ - 12.d0/(1.d0+x)**2
     $ + 12.d0/(1.d0+x)
     $ + 12*Hr1(0)/(1.d0+x)**3
     $ - 18*Hr1(0)/(1.d0+x)**2
     $ + 6*Hr1(0)/(1.d0+x)
     $ + 48*Hr2(0,0)/(1.d0+x)**4
     $ - 96*Hr2(0,0)/(1.d0+x)**3
     $ + 54*Hr2(0,0)/(1.d0+x)**2
     $ - 6*Hr2(0,0)/(1.d0+x)
       endif
      return
      end  

      double precision function ref12bb(x,s,HAr1,HAr2,HAr3,HAr4)
      implicit double precision (a-h,o-z) 
      dimension HAc1(-1:1),HAc2(-1:1,-1:1),HAc3(-1:1,-1:1,-1:1), 
     $          HAc4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAr1(-1:1),HAr2(-1:1,-1:1),HAr3(-1:1,-1:1,-1:1), 
     $          HAr4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAi1(-1:1),HAi2(-1:1,-1:1),HAi3(-1:1,-1:1,-1:1), 
     $          HAi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
        xe = Dsqrt(s)/Dsqrt(4.d0-s)
	phy = DATAN(xe)
      ref12bb =  phy/Dsqrt(s*(4.d0-s)) * (
     $ - 12.d0
     $ + 48.d0/s )
     $ + phy**2 * (
     $ - 96.d0/s**2
     $ + 12.d0/s )
     $ + 12.d0/s
       endif
       if(s.ge.4.d0) then
      ref12bb = 
     $ - 144*z2/(1.d0+x)**4
     $ + 288*z2/(1.d0+x)**3
     $ - 162*z2/(1.d0+x)**2
     $ + 18*z2/(1.d0+x)
     $ - 12.d0/(1.d0+x)**2
     $ + 12.d0/(1.d0+x)
     $ + 12*HAr1(0)/(1.d0+x)**3
     $ - 18*HAr1(0)/(1.d0+x)**2
     $ + 6*HAr1(0)/(1.d0+x)
     $ + 48*HAr2(0,0)/(1.d0+x)**4
     $ - 96*HAr2(0,0)/(1.d0+x)**3
     $ + 54*HAr2(0,0)/(1.d0+x)**2
     $ - 6*HAr2(0,0)/(1.d0+x)
       endif
      return
      end  

      double precision function rif12b(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rif12b = 0.d0
       endif
       if(s.ge.4.d0) then
      rif12b = pi * (
     $ + 12.d0/(1.d0+x)**3
     $ - 18.d0/(1.d0+x)**2
     $ + 6.d0/(1.d0+x)
     $ + 48*Hr1(0)/(1.d0+x)**4
     $ - 96*Hr1(0)/(1.d0+x)**3
     $ + 54*Hr1(0)/(1.d0+x)**2
     $ - 6*Hr1(0)/(1.d0+x) )
       endif
      return
      end    

      double precision function rif12bt(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rif12bt = 0.d0
       endif
       if(s.ge.4.d0) then
      rif12bt = pi * (
     $ + 12.d0/(1.d0+x)**3
     $ - 18.d0/(1.d0+x)**2
     $ + 6.d0/(1.d0+x)
     $ + 48*Hr1(0)/(1.d0+x)**4
     $ - 96*Hr1(0)/(1.d0+x)**3
     $ + 54*Hr1(0)/(1.d0+x)**2
     $ - 6*Hr1(0)/(1.d0+x) )
       endif
      return
      end  

      double precision function rif12bb(x,s,HAr1,HAr2,HAr3,HAr4)
      implicit double precision (a-h,o-z) 
      dimension HAc1(-1:1),HAc2(-1:1,-1:1),HAc3(-1:1,-1:1,-1:1), 
     $          HAc4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAr1(-1:1),HAr2(-1:1,-1:1),HAr3(-1:1,-1:1,-1:1), 
     $          HAr4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAi1(-1:1),HAi2(-1:1,-1:1),HAi3(-1:1,-1:1,-1:1), 
     $          HAi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rif12bb = 0.d0
       endif
       if(s.ge.4.d0) then
      rif12bb = pi * (
     $ + 12.d0/(1.d0+x)**3
     $ - 18.d0/(1.d0+x)**2
     $ + 6.d0/(1.d0+x)
     $ + 48*HAr1(0)/(1.d0+x)**4
     $ - 96*HAr1(0)/(1.d0+x)**3
     $ + 54*HAr1(0)/(1.d0+x)**2
     $ - 6*HAr1(0)/(1.d0+x) )
       endif
      return
      end  

c     G_{1/2}**(2l,CA):
      double precision function reg12(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )  
      parameter ( A  = 2.7605366106449011d0 )   
      parameter ( B  = 2.5838563897912388d0 )  
       if(s.lt.3.4d0) then  
      var = - Dlog(1.d0-s/4.d0)
      reg12 = 
     $ - 1.6666666666666666667d0 
     $ - 1.0740740740740740741d-1*var 
     $ + 5.1587301587301587302d-2*var**2 
     $ - 4.7372134038800705467d-3*var**3 
     $ - 1.9440168884613329058d-3*var**4 
     $ + 3.6183154210365094719d-4*var**5 
     $ + 5.8727833293215001454d-5*var**6 
     $ - 1.6377009398662504349d-5*var**7 
     $ - 1.5843238692758617688d-6*var**8 
     $ + 6.1314282560652485872d-7*var**9 
     $ + 4.0140135458767901545d-8*var**10 
     $ - 2.0788967630680028372d-8*var**11 
     $ - 9.7997651161340567699d-10*var**12 
     $ + 6.6355792353165564390d-10*var**13 
     $ + 2.3390999684338577844d-11*var**14 
     $ - 2.0339442131905860072d-11*var**15
     $ - 5.5111970434973154948d-13*var**16
     $ + 6.0559435370803137549d-13*var**17
     $ + 1.2918245981593723397d-14*var**18
     $ - 1.7640659318742736660d-14*var**19
     $ - 3.0354071583416123267d-16*var**20
       endif
       if(s.ge.3.4d0.AND.s.lt.4.d0) then  
       var = - Dlog(s/4.d0)
      reg12 = 
     $ - 1.6830553486007317270d0
     $ - 7.0733604921281959269d0*var 
     $ - 25.477287562661910953d0*var**2 
     $ - 25.526577487410146811d0*var**3 
     $ - 13.418507431344332592d0*var**4 
     $ - 4.0447897125278864531d0*var**5 
     $ - 3.5280276684791555589d-1*var**6 
     $ + 3.5826141442113880913d-1*var**7 
     $ + 2.5504996824599651363d-1*var**8 
     $ + A*(
     $ + 2.0d0*var 
     $ + 3.0d0*var**2 
     $ + 2.3333333333333333333d0*var**3 
     $ + 1.25d0*var**4 
     $ + 5.1666666666666666667d-1*var**5 
     $ + 1.75d-1*var**6 
     $ + 5.0396825396825396825d-2*var**7 
     $ + 1.2648809523809523810d-2*var**8 )
     $ + Dsqrt(var)*(
     $ + 17.039797178978297356d0*var 
     $ + 31.177670627014537352d0*var**2 
     $ + 25.889794435097049232d0*var**3 
     $ + 13.429558188920612544d0*var**4 
     $ + 4.8386073981040926853d0*var**5 
     $ + 1.2083041534870725542d0*var**6 
     $ + 1.6281394681401991385d-1*var**7 
     $ + 2.3523894813323072669d-2*var**8  )
     $ - Dsqrt(var)*B*(
     $ + 4.0d0*var 
     $ + 5.6666666666666666667d0*var**2 
     $ + 4.175d0*var**3 
     $ + 2.1250992063492063492d0*var**4 
     $ + 8.3691096230158730159d-1*var**5 
     $ + 2.7074948705808080808d-1*var**6 
     $ + 7.4631464184686840937d-2*var**7 
     $ + 1.7963631654020651416d-2*var**8  )
     $ - Dsqrt(var)*Dlog(var)*(
     $ + 4.1887902047863909846d0*var**2 
     $ + 6.0737457969402669277d0*var**3 
     $ + 4.5765026314794170549d0*var**4 
     $ + 2.3797772128234587868d0*var**5 
     $ + 9.5633453450718921843d-1*var**6 
     $ + 3.1533432479956951807d-1*var**7 
     $ + 8.8494550144802829329d-2*var**8  )
       endif
       if(s.ge.4.d0) then
      reg12 = 
     $ + 24*z2/(1.d0+x)**4
     $ - 48*z2/(1.d0+x)**3
     $ + 30*z2/(1.d0+x)**2
     $ - 6*z2/(1.d0+x)
     $ + 52.d0/5*z2**2/(1.d0+x)**4
     $ - 104.d0/5*z2**2/(1.d0+x)**3
     $ + 13*z2**2/(1.d0+x)**2
     $ - 13.d0/5*z2**2/(1.d0+x)
     $ - 64*z3/(1.d0+x)**4
     $ + 128*z3/(1.d0+x)**3
     $ - 76*z3/(1.d0+x)**2
     $ + 12*z3/(1.d0+x)
     $ + 12.d0/(1.d0+x)**2
     $ - 12.d0/(1.d0+x)
     $ + 192*Hr1(-1)*z2/(1.d0+x)**4
     $ - 384*Hr1(-1)*z2/(1.d0+x)**3
     $ + 228*Hr1(-1)*z2/(1.d0+x)**2
     $ - 36*Hr1(-1)*z2/(1.d0+x)
     $ + 96*Hr1(-1)*z3/(1.d0+x)**4
     $ - 192*Hr1(-1)*z3/(1.d0+x)**3
     $ + 120*Hr1(-1)*z3/(1.d0+x)**2
     $ - 24*Hr1(-1)*z3/(1.d0+x)
     $ + 144*Hr1(0)*z2/(1.d0+x)**5
     $ - 456*Hr1(0)*z2/(1.d0+x)**4
     $ + 516*Hr1(0)*z2/(1.d0+x)**3
     $ - 240*Hr1(0)*z2/(1.d0+x)**2
     $ + 36*Hr1(0)*z2/(1.d0+x)
     $ - 48*Hr1(0)*z3/(1.d0+x)**4
     $ + 96*Hr1(0)*z3/(1.d0+x)**3
     $ - 60*Hr1(0)*z3/(1.d0+x)**2
     $ + 12*Hr1(0)*z3/(1.d0+x)
     $ + 128*Hr2(-1,0)*z2/(1.d0+x)**4
     $ - 256*Hr2(-1,0)*z2/(1.d0+x)**3
     $ + 160*Hr2(-1,0)*z2/(1.d0+x)**2
     $ - 32*Hr2(-1,0)*z2/(1.d0+x)
     $ + 8*Hr2(0,0)*z2/(1.d0+x)**4
     $ - 16*Hr2(0,0)*z2/(1.d0+x)**3
     $ + 10*Hr2(0,0)*z2/(1.d0+x)**2
     $ - 2*Hr2(0,0)*z2/(1.d0+x)
     $ - 8*Hr2(0,0)/(1.d0+x)**4
     $ + 16*Hr2(0,0)/(1.d0+x)**3
     $ - 10*Hr2(0,0)/(1.d0+x)**2
     $ + 2*Hr2(0,0)/(1.d0+x)
     $ - 64*Hr3(-1,0,0)/(1.d0+x)**4
     $ + 128*Hr3(-1,0,0)/(1.d0+x)**3
     $ - 76*Hr3(-1,0,0)/(1.d0+x)**2
     $ + 12*Hr3(-1,0,0)/(1.d0+x)
     $ - 48*Hr3(0,0,0)/(1.d0+x)**5
     $ + 152*Hr3(0,0,0)/(1.d0+x)**4
     $ - 172*Hr3(0,0,0)/(1.d0+x)**3
     $ + 80*Hr3(0,0,0)/(1.d0+x)**2
     $ - 12*Hr3(0,0,0)/(1.d0+x)
     $ - 32*Hr4(-1,0,0,0)/(1.d0+x)**4
     $ + 64*Hr4(-1,0,0,0)/(1.d0+x)**3
     $ - 40*Hr4(-1,0,0,0)/(1.d0+x)**2
     $ + 8*Hr4(-1,0,0,0)/(1.d0+x)
     $ - 64*Hr4(-1,0,1,0)/(1.d0+x)**4
     $ + 128*Hr4(-1,0,1,0)/(1.d0+x)**3
     $ - 80*Hr4(-1,0,1,0)/(1.d0+x)**2
     $ + 16*Hr4(-1,0,1,0)/(1.d0+x)
     $ - 8*Hr4(0,0,0,0)/(1.d0+x)**4
     $ + 16*Hr4(0,0,0,0)/(1.d0+x)**3
     $ - 10*Hr4(0,0,0,0)/(1.d0+x)**2
     $ + 2*Hr4(0,0,0,0)/(1.d0+x)
     $ + 32*Hr4(0,0,1,0)/(1.d0+x)**4
     $ - 64*Hr4(0,0,1,0)/(1.d0+x)**3
     $ + 40*Hr4(0,0,1,0)/(1.d0+x)**2
     $ - 8*Hr4(0,0,1,0)/(1.d0+x)
       endif
      return
      end  

      double precision function reg12t(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )  
      parameter ( A  = 2.7605366106449011d0 )   
      parameter ( B  = 2.5838563897912388d0 )  
       if(s.lt.3.4d0) then  
      var = - Dlog(1.d0-s/4.d0)
      reg12t = 
     $ - 1.6666666666666666667d0 
     $ - 1.0740740740740740741d-1*var 
     $ + 5.1587301587301587302d-2*var**2 
     $ - 4.7372134038800705467d-3*var**3 
     $ - 1.9440168884613329058d-3*var**4 
     $ + 3.6183154210365094719d-4*var**5 
     $ + 5.8727833293215001454d-5*var**6 
     $ - 1.6377009398662504349d-5*var**7 
     $ - 1.5843238692758617688d-6*var**8 
     $ + 6.1314282560652485872d-7*var**9 
     $ + 4.0140135458767901545d-8*var**10 
     $ - 2.0788967630680028372d-8*var**11 
     $ - 9.7997651161340567699d-10*var**12 
     $ + 6.6355792353165564390d-10*var**13 
     $ + 2.3390999684338577844d-11*var**14 
     $ - 2.0339442131905860072d-11*var**15
     $ - 5.5111970434973154948d-13*var**16
     $ + 6.0559435370803137549d-13*var**17
     $ + 1.2918245981593723397d-14*var**18
     $ - 1.7640659318742736660d-14*var**19
     $ - 3.0354071583416123267d-16*var**20
       endif
       if(s.ge.3.4d0.AND.s.lt.4.d0) then  
       var = - Dlog(s/4.d0)
      reg12t = 
     $ - 1.6830553486007317270d0
     $ - 7.0733604921281959269d0*var 
     $ - 25.477287562661910953d0*var**2 
     $ - 25.526577487410146811d0*var**3 
     $ - 13.418507431344332592d0*var**4 
     $ - 4.0447897125278864531d0*var**5 
     $ - 3.5280276684791555589d-1*var**6 
     $ + 3.5826141442113880913d-1*var**7 
     $ + 2.5504996824599651363d-1*var**8 
     $ + A*(
     $ + 2.0d0*var 
     $ + 3.0d0*var**2 
     $ + 2.3333333333333333333d0*var**3 
     $ + 1.25d0*var**4 
     $ + 5.1666666666666666667d-1*var**5 
     $ + 1.75d-1*var**6 
     $ + 5.0396825396825396825d-2*var**7 
     $ + 1.2648809523809523810d-2*var**8 )
     $ + Dsqrt(var)*(
     $ + 17.039797178978297356d0*var 
     $ + 31.177670627014537352d0*var**2 
     $ + 25.889794435097049232d0*var**3 
     $ + 13.429558188920612544d0*var**4 
     $ + 4.8386073981040926853d0*var**5 
     $ + 1.2083041534870725542d0*var**6 
     $ + 1.6281394681401991385d-1*var**7 
     $ + 2.3523894813323072669d-2*var**8  )
     $ - Dsqrt(var)*B*(
     $ + 4.0d0*var 
     $ + 5.6666666666666666667d0*var**2 
     $ + 4.175d0*var**3 
     $ + 2.1250992063492063492d0*var**4 
     $ + 8.3691096230158730159d-1*var**5 
     $ + 2.7074948705808080808d-1*var**6 
     $ + 7.4631464184686840937d-2*var**7 
     $ + 1.7963631654020651416d-2*var**8  )
     $ - Dsqrt(var)*Dlog(var)*(
     $ + 4.1887902047863909846d0*var**2 
     $ + 6.0737457969402669277d0*var**3 
     $ + 4.5765026314794170549d0*var**4 
     $ + 2.3797772128234587868d0*var**5 
     $ + 9.5633453450718921843d-1*var**6 
     $ + 3.1533432479956951807d-1*var**7 
     $ + 8.8494550144802829329d-2*var**8  )
       endif
       if(s.ge.4.d0) then
      reg12t = 
     $ + 24*z2/(1.d0+x)**4
     $ - 48*z2/(1.d0+x)**3
     $ + 30*z2/(1.d0+x)**2
     $ - 6*z2/(1.d0+x)
     $ + 52.d0/5*z2**2/(1.d0+x)**4
     $ - 104.d0/5*z2**2/(1.d0+x)**3
     $ + 13*z2**2/(1.d0+x)**2
     $ - 13.d0/5*z2**2/(1.d0+x)
     $ - 64*z3/(1.d0+x)**4
     $ + 128*z3/(1.d0+x)**3
     $ - 76*z3/(1.d0+x)**2
     $ + 12*z3/(1.d0+x)
     $ + 12.d0/(1.d0+x)**2
     $ - 12.d0/(1.d0+x)
     $ + 192*Hr1(-1)*z2/(1.d0+x)**4
     $ - 384*Hr1(-1)*z2/(1.d0+x)**3
     $ + 228*Hr1(-1)*z2/(1.d0+x)**2
     $ - 36*Hr1(-1)*z2/(1.d0+x)
     $ + 96*Hr1(-1)*z3/(1.d0+x)**4
     $ - 192*Hr1(-1)*z3/(1.d0+x)**3
     $ + 120*Hr1(-1)*z3/(1.d0+x)**2
     $ - 24*Hr1(-1)*z3/(1.d0+x)
     $ + 144*Hr1(0)*z2/(1.d0+x)**5
     $ - 456*Hr1(0)*z2/(1.d0+x)**4
     $ + 516*Hr1(0)*z2/(1.d0+x)**3
     $ - 240*Hr1(0)*z2/(1.d0+x)**2
     $ + 36*Hr1(0)*z2/(1.d0+x)
     $ - 48*Hr1(0)*z3/(1.d0+x)**4
     $ + 96*Hr1(0)*z3/(1.d0+x)**3
     $ - 60*Hr1(0)*z3/(1.d0+x)**2
     $ + 12*Hr1(0)*z3/(1.d0+x)
     $ + 128*Hr2(-1,0)*z2/(1.d0+x)**4
     $ - 256*Hr2(-1,0)*z2/(1.d0+x)**3
     $ + 160*Hr2(-1,0)*z2/(1.d0+x)**2
     $ - 32*Hr2(-1,0)*z2/(1.d0+x)
     $ + 8*Hr2(0,0)*z2/(1.d0+x)**4
     $ - 16*Hr2(0,0)*z2/(1.d0+x)**3
     $ + 10*Hr2(0,0)*z2/(1.d0+x)**2
     $ - 2*Hr2(0,0)*z2/(1.d0+x)
     $ - 8*Hr2(0,0)/(1.d0+x)**4
     $ + 16*Hr2(0,0)/(1.d0+x)**3
     $ - 10*Hr2(0,0)/(1.d0+x)**2
     $ + 2*Hr2(0,0)/(1.d0+x)
     $ - 64*Hr3(-1,0,0)/(1.d0+x)**4
     $ + 128*Hr3(-1,0,0)/(1.d0+x)**3
     $ - 76*Hr3(-1,0,0)/(1.d0+x)**2
     $ + 12*Hr3(-1,0,0)/(1.d0+x)
     $ - 48*Hr3(0,0,0)/(1.d0+x)**5
     $ + 152*Hr3(0,0,0)/(1.d0+x)**4
     $ - 172*Hr3(0,0,0)/(1.d0+x)**3
     $ + 80*Hr3(0,0,0)/(1.d0+x)**2
     $ - 12*Hr3(0,0,0)/(1.d0+x)
     $ - 32*Hr4(-1,0,0,0)/(1.d0+x)**4
     $ + 64*Hr4(-1,0,0,0)/(1.d0+x)**3
     $ - 40*Hr4(-1,0,0,0)/(1.d0+x)**2
     $ + 8*Hr4(-1,0,0,0)/(1.d0+x)
     $ - 64*Hr4(-1,0,1,0)/(1.d0+x)**4
     $ + 128*Hr4(-1,0,1,0)/(1.d0+x)**3
     $ - 80*Hr4(-1,0,1,0)/(1.d0+x)**2
     $ + 16*Hr4(-1,0,1,0)/(1.d0+x)
     $ - 8*Hr4(0,0,0,0)/(1.d0+x)**4
     $ + 16*Hr4(0,0,0,0)/(1.d0+x)**3
     $ - 10*Hr4(0,0,0,0)/(1.d0+x)**2
     $ + 2*Hr4(0,0,0,0)/(1.d0+x)
     $ + 32*Hr4(0,0,1,0)/(1.d0+x)**4
     $ - 64*Hr4(0,0,1,0)/(1.d0+x)**3
     $ + 40*Hr4(0,0,1,0)/(1.d0+x)**2
     $ - 8*Hr4(0,0,1,0)/(1.d0+x)
       endif
      return
      end  

      double precision function reg12b(x,s,HAr1,HAr2,HAr3,HAr4)
      implicit double precision (a-h,o-z) 
      dimension HAc1(-1:1),HAc2(-1:1,-1:1),HAc3(-1:1,-1:1,-1:1), 
     $          HAc4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAr1(-1:1),HAr2(-1:1,-1:1),HAr3(-1:1,-1:1,-1:1), 
     $          HAr4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAi1(-1:1),HAi2(-1:1,-1:1),HAi3(-1:1,-1:1,-1:1), 
     $          HAi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )  
      parameter ( A  = 2.7605366106449011d0 )   
      parameter ( B  = 2.5838563897912388d0 )  
       if(s.lt.3.4d0) then  
      var = - Dlog(1.d0-s/4.d0)
      reg12b = 
     $ - 1.6666666666666666667d0 
     $ - 1.0740740740740740741d-1*var 
     $ + 5.1587301587301587302d-2*var**2 
     $ - 4.7372134038800705467d-3*var**3 
     $ - 1.9440168884613329058d-3*var**4 
     $ + 3.6183154210365094719d-4*var**5 
     $ + 5.8727833293215001454d-5*var**6 
     $ - 1.6377009398662504349d-5*var**7 
     $ - 1.5843238692758617688d-6*var**8 
     $ + 6.1314282560652485872d-7*var**9 
     $ + 4.0140135458767901545d-8*var**10 
     $ - 2.0788967630680028372d-8*var**11 
     $ - 9.7997651161340567699d-10*var**12 
     $ + 6.6355792353165564390d-10*var**13 
     $ + 2.3390999684338577844d-11*var**14 
     $ - 2.0339442131905860072d-11*var**15
     $ - 5.5111970434973154948d-13*var**16
     $ + 6.0559435370803137549d-13*var**17
     $ + 1.2918245981593723397d-14*var**18
     $ - 1.7640659318742736660d-14*var**19
     $ - 3.0354071583416123267d-16*var**20
       endif
       if(s.ge.3.4d0.AND.s.lt.4.d0) then  
       var = - Dlog(s/4.d0)
      reg12b = 
     $ - 1.6830553486007317270d0
     $ - 7.0733604921281959269d0*var 
     $ - 25.477287562661910953d0*var**2 
     $ - 25.526577487410146811d0*var**3 
     $ - 13.418507431344332592d0*var**4 
     $ - 4.0447897125278864531d0*var**5 
     $ - 3.5280276684791555589d-1*var**6 
     $ + 3.5826141442113880913d-1*var**7 
     $ + 2.5504996824599651363d-1*var**8 
     $ + A*(
     $ + 2.0d0*var 
     $ + 3.0d0*var**2 
     $ + 2.3333333333333333333d0*var**3 
     $ + 1.25d0*var**4 
     $ + 5.1666666666666666667d-1*var**5 
     $ + 1.75d-1*var**6 
     $ + 5.0396825396825396825d-2*var**7 
     $ + 1.2648809523809523810d-2*var**8 )
     $ + Dsqrt(var)*(
     $ + 17.039797178978297356d0*var 
     $ + 31.177670627014537352d0*var**2 
     $ + 25.889794435097049232d0*var**3 
     $ + 13.429558188920612544d0*var**4 
     $ + 4.8386073981040926853d0*var**5 
     $ + 1.2083041534870725542d0*var**6 
     $ + 1.6281394681401991385d-1*var**7 
     $ + 2.3523894813323072669d-2*var**8  )
     $ - Dsqrt(var)*B*(
     $ + 4.0d0*var 
     $ + 5.6666666666666666667d0*var**2 
     $ + 4.175d0*var**3 
     $ + 2.1250992063492063492d0*var**4 
     $ + 8.3691096230158730159d-1*var**5 
     $ + 2.7074948705808080808d-1*var**6 
     $ + 7.4631464184686840937d-2*var**7 
     $ + 1.7963631654020651416d-2*var**8  )
     $ - Dsqrt(var)*Dlog(var)*(
     $ + 4.1887902047863909846d0*var**2 
     $ + 6.0737457969402669277d0*var**3 
     $ + 4.5765026314794170549d0*var**4 
     $ + 2.3797772128234587868d0*var**5 
     $ + 9.5633453450718921843d-1*var**6 
     $ + 3.1533432479956951807d-1*var**7 
     $ + 8.8494550144802829329d-2*var**8  )
       endif
       if(s.ge.4.d0) then
      reg12b = 
     $ + 24*z2/(1.d0+x)**4
     $ - 48*z2/(1.d0+x)**3
     $ + 30*z2/(1.d0+x)**2
     $ - 6*z2/(1.d0+x)
     $ + 52.d0/5*z2**2/(1.d0+x)**4
     $ - 104.d0/5*z2**2/(1.d0+x)**3
     $ + 13*z2**2/(1.d0+x)**2
     $ - 13.d0/5*z2**2/(1.d0+x)
     $ - 64*z3/(1.d0+x)**4
     $ + 128*z3/(1.d0+x)**3
     $ - 76*z3/(1.d0+x)**2
     $ + 12*z3/(1.d0+x)
     $ + 12.d0/(1.d0+x)**2
     $ - 12.d0/(1.d0+x)
     $ + 192*HAr1(-1)*z2/(1.d0+x)**4
     $ - 384*HAr1(-1)*z2/(1.d0+x)**3
     $ + 228*HAr1(-1)*z2/(1.d0+x)**2
     $ - 36*HAr1(-1)*z2/(1.d0+x)
     $ + 96*HAr1(-1)*z3/(1.d0+x)**4
     $ - 192*HAr1(-1)*z3/(1.d0+x)**3
     $ + 120*HAr1(-1)*z3/(1.d0+x)**2
     $ - 24*HAr1(-1)*z3/(1.d0+x)
     $ + 144*HAr1(0)*z2/(1.d0+x)**5
     $ - 456*HAr1(0)*z2/(1.d0+x)**4
     $ + 516*HAr1(0)*z2/(1.d0+x)**3
     $ - 240*HAr1(0)*z2/(1.d0+x)**2
     $ + 36*HAr1(0)*z2/(1.d0+x)
     $ - 48*HAr1(0)*z3/(1.d0+x)**4
     $ + 96*HAr1(0)*z3/(1.d0+x)**3
     $ - 60*HAr1(0)*z3/(1.d0+x)**2
     $ + 12*HAr1(0)*z3/(1.d0+x)
     $ + 128*HAr2(-1,0)*z2/(1.d0+x)**4
     $ - 256*HAr2(-1,0)*z2/(1.d0+x)**3
     $ + 160*HAr2(-1,0)*z2/(1.d0+x)**2
     $ - 32*HAr2(-1,0)*z2/(1.d0+x)
     $ + 8*HAr2(0,0)*z2/(1.d0+x)**4
     $ - 16*HAr2(0,0)*z2/(1.d0+x)**3
     $ + 10*HAr2(0,0)*z2/(1.d0+x)**2
     $ - 2*HAr2(0,0)*z2/(1.d0+x)
     $ - 8*HAr2(0,0)/(1.d0+x)**4
     $ + 16*HAr2(0,0)/(1.d0+x)**3
     $ - 10*HAr2(0,0)/(1.d0+x)**2
     $ + 2*HAr2(0,0)/(1.d0+x)
     $ - 64*HAr3(-1,0,0)/(1.d0+x)**4
     $ + 128*HAr3(-1,0,0)/(1.d0+x)**3
     $ - 76*HAr3(-1,0,0)/(1.d0+x)**2
     $ + 12*HAr3(-1,0,0)/(1.d0+x)
     $ - 48*HAr3(0,0,0)/(1.d0+x)**5
     $ + 152*HAr3(0,0,0)/(1.d0+x)**4
     $ - 172*HAr3(0,0,0)/(1.d0+x)**3
     $ + 80*HAr3(0,0,0)/(1.d0+x)**2
     $ - 12*HAr3(0,0,0)/(1.d0+x)
     $ - 32*HAr4(-1,0,0,0)/(1.d0+x)**4
     $ + 64*HAr4(-1,0,0,0)/(1.d0+x)**3
     $ - 40*HAr4(-1,0,0,0)/(1.d0+x)**2
     $ + 8*HAr4(-1,0,0,0)/(1.d0+x)
     $ - 64*HAr4(-1,0,1,0)/(1.d0+x)**4
     $ + 128*HAr4(-1,0,1,0)/(1.d0+x)**3
     $ - 80*HAr4(-1,0,1,0)/(1.d0+x)**2
     $ + 16*HAr4(-1,0,1,0)/(1.d0+x)
     $ - 8*HAr4(0,0,0,0)/(1.d0+x)**4
     $ + 16*HAr4(0,0,0,0)/(1.d0+x)**3
     $ - 10*HAr4(0,0,0,0)/(1.d0+x)**2
     $ + 2*HAr4(0,0,0,0)/(1.d0+x)
     $ + 32*HAr4(0,0,1,0)/(1.d0+x)**4
     $ - 64*HAr4(0,0,1,0)/(1.d0+x)**3
     $ + 40*HAr4(0,0,1,0)/(1.d0+x)**2
     $ - 8*HAr4(0,0,1,0)/(1.d0+x)
       endif
      return
      end  

      double precision function rig12(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rig12 = 0.d0
       endif
       if(s.ge.4.d0) then
      rig12 = pi * (
     $ + 48*z2/(1.d0+x)**5
     $ - 152*z2/(1.d0+x)**4
     $ + 172*z2/(1.d0+x)**3
     $ - 80*z2/(1.d0+x)**2
     $ + 12*z2/(1.d0+x)
     $ - 48*z3/(1.d0+x)**4
     $ + 96*z3/(1.d0+x)**3
     $ - 60*z3/(1.d0+x)**2
     $ + 12*z3/(1.d0+x)
     $ + 64*Hr1(-1)*z2/(1.d0+x)**4
     $ - 128*Hr1(-1)*z2/(1.d0+x)**3
     $ + 80*Hr1(-1)*z2/(1.d0+x)**2
     $ - 16*Hr1(-1)*z2/(1.d0+x)
     $ - 8*Hr1(0)*z2/(1.d0+x)**4
     $ + 16*Hr1(0)*z2/(1.d0+x)**3
     $ - 10*Hr1(0)*z2/(1.d0+x)**2
     $ + 2*Hr1(0)*z2/(1.d0+x)
     $ - 8*Hr1(0)/(1.d0+x)**4
     $ + 16*Hr1(0)/(1.d0+x)**3
     $ - 10*Hr1(0)/(1.d0+x)**2
     $ + 2*Hr1(0)/(1.d0+x)
     $ - 64*Hr2(-1,0)/(1.d0+x)**4
     $ + 128*Hr2(-1,0)/(1.d0+x)**3
     $ - 76*Hr2(-1,0)/(1.d0+x)**2
     $ + 12*Hr2(-1,0)/(1.d0+x)
     $ - 48*Hr2(0,0)/(1.d0+x)**5
     $ + 152*Hr2(0,0)/(1.d0+x)**4
     $ - 172*Hr2(0,0)/(1.d0+x)**3
     $ + 80*Hr2(0,0)/(1.d0+x)**2
     $ - 12*Hr2(0,0)/(1.d0+x)
     $ - 32*Hr3(-1,0,0)/(1.d0+x)**4
     $ + 64*Hr3(-1,0,0)/(1.d0+x)**3
     $ - 40*Hr3(-1,0,0)/(1.d0+x)**2
     $ + 8*Hr3(-1,0,0)/(1.d0+x)
     $ - 64*Hr3(-1,0,1)/(1.d0+x)**4
     $ + 128*Hr3(-1,0,1)/(1.d0+x)**3
     $ - 80*Hr3(-1,0,1)/(1.d0+x)**2
     $ + 16*Hr3(-1,0,1)/(1.d0+x)
     $ - 8*Hr3(0,0,0)/(1.d0+x)**4
     $ + 16*Hr3(0,0,0)/(1.d0+x)**3
     $ - 10*Hr3(0,0,0)/(1.d0+x)**2
     $ + 2*Hr3(0,0,0)/(1.d0+x)
     $ + 32*Hr3(0,0,1)/(1.d0+x)**4
     $ - 64*Hr3(0,0,1)/(1.d0+x)**3
     $ + 40*Hr3(0,0,1)/(1.d0+x)**2
     $ - 8*Hr3(0,0,1)/(1.d0+x) )
       endif
      return
      end    

      double precision function rig12t(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rig12t = 0.d0
       endif
       if(s.ge.4.d0) then
      rig12t = pi * (
     $ + 48*z2/(1.d0+x)**5
     $ - 152*z2/(1.d0+x)**4
     $ + 172*z2/(1.d0+x)**3
     $ - 80*z2/(1.d0+x)**2
     $ + 12*z2/(1.d0+x)
     $ - 48*z3/(1.d0+x)**4
     $ + 96*z3/(1.d0+x)**3
     $ - 60*z3/(1.d0+x)**2
     $ + 12*z3/(1.d0+x)
     $ + 64*Hr1(-1)*z2/(1.d0+x)**4
     $ - 128*Hr1(-1)*z2/(1.d0+x)**3
     $ + 80*Hr1(-1)*z2/(1.d0+x)**2
     $ - 16*Hr1(-1)*z2/(1.d0+x)
     $ - 8*Hr1(0)*z2/(1.d0+x)**4
     $ + 16*Hr1(0)*z2/(1.d0+x)**3
     $ - 10*Hr1(0)*z2/(1.d0+x)**2
     $ + 2*Hr1(0)*z2/(1.d0+x)
     $ - 8*Hr1(0)/(1.d0+x)**4
     $ + 16*Hr1(0)/(1.d0+x)**3
     $ - 10*Hr1(0)/(1.d0+x)**2
     $ + 2*Hr1(0)/(1.d0+x)
     $ - 64*Hr2(-1,0)/(1.d0+x)**4
     $ + 128*Hr2(-1,0)/(1.d0+x)**3
     $ - 76*Hr2(-1,0)/(1.d0+x)**2
     $ + 12*Hr2(-1,0)/(1.d0+x)
     $ - 48*Hr2(0,0)/(1.d0+x)**5
     $ + 152*Hr2(0,0)/(1.d0+x)**4
     $ - 172*Hr2(0,0)/(1.d0+x)**3
     $ + 80*Hr2(0,0)/(1.d0+x)**2
     $ - 12*Hr2(0,0)/(1.d0+x)
     $ - 32*Hr3(-1,0,0)/(1.d0+x)**4
     $ + 64*Hr3(-1,0,0)/(1.d0+x)**3
     $ - 40*Hr3(-1,0,0)/(1.d0+x)**2
     $ + 8*Hr3(-1,0,0)/(1.d0+x)
     $ - 64*Hr3(-1,0,1)/(1.d0+x)**4
     $ + 128*Hr3(-1,0,1)/(1.d0+x)**3
     $ - 80*Hr3(-1,0,1)/(1.d0+x)**2
     $ + 16*Hr3(-1,0,1)/(1.d0+x)
     $ - 8*Hr3(0,0,0)/(1.d0+x)**4
     $ + 16*Hr3(0,0,0)/(1.d0+x)**3
     $ - 10*Hr3(0,0,0)/(1.d0+x)**2
     $ + 2*Hr3(0,0,0)/(1.d0+x)
     $ + 32*Hr3(0,0,1)/(1.d0+x)**4
     $ - 64*Hr3(0,0,1)/(1.d0+x)**3
     $ + 40*Hr3(0,0,1)/(1.d0+x)**2
     $ - 8*Hr3(0,0,1)/(1.d0+x) )
       endif
      return
      end  

      double precision function rig12b(x,s,HAr1,HAr2,HAr3,HAr4)
      implicit double precision (a-h,o-z) 
      dimension HAc1(-1:1),HAc2(-1:1,-1:1),HAc3(-1:1,-1:1,-1:1), 
     $          HAc4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAr1(-1:1),HAr2(-1:1,-1:1),HAr3(-1:1,-1:1,-1:1), 
     $          HAr4(-1:1,-1:1,-1:1,-1:1) 
      dimension HAi1(-1:1),HAi2(-1:1,-1:1),HAi3(-1:1,-1:1,-1:1), 
     $          HAi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
      rig12b = 0.d0
       endif
       if(s.ge.4.d0) then
      rig12b = pi * (
     $ + 48*z2/(1.d0+x)**5
     $ - 152*z2/(1.d0+x)**4
     $ + 172*z2/(1.d0+x)**3
     $ - 80*z2/(1.d0+x)**2
     $ + 12*z2/(1.d0+x)
     $ - 48*z3/(1.d0+x)**4
     $ + 96*z3/(1.d0+x)**3
     $ - 60*z3/(1.d0+x)**2
     $ + 12*z3/(1.d0+x)
     $ + 64*HAr1(-1)*z2/(1.d0+x)**4
     $ - 128*HAr1(-1)*z2/(1.d0+x)**3
     $ + 80*HAr1(-1)*z2/(1.d0+x)**2
     $ - 16*HAr1(-1)*z2/(1.d0+x)
     $ - 8*HAr1(0)*z2/(1.d0+x)**4
     $ + 16*HAr1(0)*z2/(1.d0+x)**3
     $ - 10*HAr1(0)*z2/(1.d0+x)**2
     $ + 2*HAr1(0)*z2/(1.d0+x)
     $ - 8*HAr1(0)/(1.d0+x)**4
     $ + 16*HAr1(0)/(1.d0+x)**3
     $ - 10*HAr1(0)/(1.d0+x)**2
     $ + 2*HAr1(0)/(1.d0+x)
     $ - 64*HAr2(-1,0)/(1.d0+x)**4
     $ + 128*HAr2(-1,0)/(1.d0+x)**3
     $ - 76*HAr2(-1,0)/(1.d0+x)**2
     $ + 12*HAr2(-1,0)/(1.d0+x)
     $ - 48*HAr2(0,0)/(1.d0+x)**5
     $ + 152*HAr2(0,0)/(1.d0+x)**4
     $ - 172*HAr2(0,0)/(1.d0+x)**3
     $ + 80*HAr2(0,0)/(1.d0+x)**2
     $ - 12*HAr2(0,0)/(1.d0+x)
     $ - 32*HAr3(-1,0,0)/(1.d0+x)**4
     $ + 64*HAr3(-1,0,0)/(1.d0+x)**3
     $ - 40*HAr3(-1,0,0)/(1.d0+x)**2
     $ + 8*HAr3(-1,0,0)/(1.d0+x)
     $ - 64*HAr3(-1,0,1)/(1.d0+x)**4
     $ + 128*HAr3(-1,0,1)/(1.d0+x)**3
     $ - 80*HAr3(-1,0,1)/(1.d0+x)**2
     $ + 16*HAr3(-1,0,1)/(1.d0+x)
     $ - 8*HAr3(0,0,0)/(1.d0+x)**4
     $ + 16*HAr3(0,0,0)/(1.d0+x)**3
     $ - 10*HAr3(0,0,0)/(1.d0+x)**2
     $ + 2*HAr3(0,0,0)/(1.d0+x)
     $ + 32*HAr3(0,0,1)/(1.d0+x)**4
     $ - 64*HAr3(0,0,1)/(1.d0+x)**3
     $ + 40*HAr3(0,0,1)/(1.d0+x)**2
     $ - 8*HAr3(0,0,1)/(1.d0+x) )
       endif
      return
      end  

c
c     Electo-Weak functions
c

c     F_{1}**(1l):
      double precision function re1f1(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 ) 
       if(s.lt.4.d0) then 
        xe = Dsqrt(s)/Dsqrt(4.d0-s)
	phy = DATAN(xe)
      re1f1 = phy**2 * (
     $ - 48.d0/s**2
     $ + 24.d0/s )
     $ + 2.d0
     $ + 12.d0/s
       endif
       if(s.ge.4.d0) then
      re1f1 = 
     $ + 2.d0
     $ - 72*z2/(1.d0+x)**4
     $ + 144*z2/(1.d0+x)**3
     $ - 108*z2/(1.d0+x)**2
     $ + 36*z2/(1.d0+x)
     $ - 12.d0/(1.d0+x)**2
     $ + 12.d0/(1.d0+x)
     $ + 24*Hr2(0,0)/(1.d0+x)**4
     $ - 48*Hr2(0,0)/(1.d0+x)**3
     $ + 36*Hr2(0,0)/(1.d0+x)**2
     $ - 12*Hr2(0,0)/(1.d0+x)
       endif
      return
      end  

      double precision function ri1f1(x,s,Hr1,Hr2,Hr3,Hr4)
      implicit double precision (a-h,o-z) 
      dimension Hc1(-1:1),Hc2(-1:1,-1:1),Hc3(-1:1,-1:1,-1:1), 
     $          Hc4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hr1(-1:1),Hr2(-1:1,-1:1),Hr3(-1:1,-1:1,-1:1), 
     $          Hr4(-1:1,-1:1,-1:1,-1:1) 
      dimension Hi1(-1:1),Hi2(-1:1,-1:1),Hi3(-1:1,-1:1,-1:1), 
     $          Hi4(-1:1,-1:1,-1:1,-1:1) 
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )

      if(s.lt.4.d0) then
        ri1f1 = 0.d0
      endif
      if(s.ge.4.d0) then
      ri1f1 = pi * (
     $ + 24*Hr1(0)/(1.d0+x)**4
     $ - 48*Hr1(0)/(1.d0+x)**3
     $ + 36*Hr1(0)/(1.d0+x)**2
     $ - 12*Hr1(0)/(1.d0+x) )
      endif
      return
      end

c     Pseudoscalar

      double complex function twoloop_pseudo(s,TR,CF,CA,
     $logmassratio,numfer)
      implicit none
      include  'Flags.h'
      double precision s,tr,cf,ca
      double complex x,reduced,z
      external reduced
      double precision ReK121l, RiK121l,ReK122la,RiK122la,
     -                 ReK122lb,RiK122lb,RK12OSre,RK12OSim,
     -                 ReKA122l,RiKA122l,ReK12t2l,RiK12t2l

      double complex rek12a, rek12b, reka12
      external rek12a, rek12b, reka12

      double complex zi(12),ztmp
      integer i
      double complex myli2,myli3,myli4
      external myli2,myli3,myli4
      integer numfer

      double precision logmassratio

      double complex ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10

      common/ahpl/ ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10


*
*
      x=reduced(1d0/s)

c      if (1>2) then

!      zi(1) = dcmplx(-4d0,0.5d0)
!      zi(2) = dcmplx(-0.75d0,0.5d0)
!      zi(3) = dcmplx(0.75d0,0.5d0)
!      zi(4) = dcmplx(4d0,0.5d0)
!      zi(5) = dcmplx(-4d0,-0.5d0)
!      zi(6) = dcmplx(-0.75d0,-0.5d0)
!      zi(7) = dcmplx(0.75d0,-0.5d0)
!      zi(8) = dcmplx(4d0,-0.5d0)
!      zi(9) = dcmplx(-4d0,0d0)
!      zi(10) = dcmplx(-0.75d0,0d0)
!      zi(11) = dcmplx(0.75d0,0d0)
!      zi(12) = dcmplx(4d0,0d0)

c      do i=1,12
c         print*,'z=',i,zi(i)
c         print*,'li2=',myli2(zi(i))
c         print*,'li3=',myli3(zi(i))
c         print*,'li4=',myli4(zi(i))
c        print*,' '
c       end do

c      endif

      call myhpl(x)

cccccccccccccccccccccccccccccccccccccccccccc
!      if (1>2) then
!         print*,'z     =',x
!         print*,'ah0   =',ah0
!         print*,'ah00  =',ah00
!         print*,'ah000 =',ah000
!         print*,'ah0000=',ah0000
!         print*,'ah0m10=',ah0m10
!         print*,'ah010 =',ah010
!         print*,'ah100 =',ah100
!         print*,'ah1000=',ah1000
!         print*,'ah0100=',ah0100
!         print*,'ah0010=',ah0010
!         print*,'ah0m100=',ah0m100
!         print*,'ah00m10=',ah00m10
!         print*,'ah1   =',ah1
!         print*,'ah10  =',ah10
!         print*,'ah10m10 =',ah10m10
!      end if


* One-loop functions:
*

c      ReK121l = dble(4d0/s*ah00)
c      RiK121l = dimag(4d0/s*ah00)

*
* Two-loop functions:
*
       ReK122la  = dble(rek12a(x))
       RiK122la  = dimag(rek12a(x))
       ReK122lb  = dble(rek12b(x))
       RiK122lb  = dimag(rek12b(x))


*
*******
c     DRBAR
       if ((massren.eq.1).or.(massren.eq.2)) then
          RK12OSre = ReK122la + ReK122lb*logmassratio
          RK12OSim = RiK122la + RiK122lb*logmassratio
c     OS
       else if (massren.eq.0) then
          RK12OSre = ReK122la + 4.d0/3*ReK122lb
          RK12OSim = RiK122la + 4.d0/3*RiK122lb
       end if
*
*******
*
       ReKA122l  = dble(reka12(x))
       RiKA122l  = dimag(reka12(x))

!       write(*,*), -4d0/(3d0*4d0*s)
!       write(*,*), rek12a(x)
!       write(*,*),-1d0/(4d0*s)
!       write(*,*), rek12b(x)
!       write(*,*), -2d0-1d0/(6d0*s)
!       write(*,*), reka12(x)
!       stop

*
*
       ReK12t2l = TR*( CF*RK12OSre + CA*ReKA122l )
       RiK12t2l = TR*( CF*RK12OSim + CA*RiKA122l )

c       print*,'ReK12t2l=',TR*CF*RK12OSre ,TR* CA*ReKA122l
*
c       print*,'rek12a=',rek12a(x)
c       print*,'rek12b=',rek12b(x)
c       print*,'reka12=',reka12(x)
c       print*,'twoloop pseudo=',ReK12t2l,RiK12t2l
       twoloop_pseudo = ReK12t2l + dcmplx(0d0,1d0)*RiK12t2l

c       stop

       return
       end
*




cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      double complex function rek12a(x)
      implicit none
      double precision pi,z2,z3,aln2
      double complex x
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )

      double complex p1,p2,p3,p4,p5,p5num,p5den

      double complex ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10

      common/ahpl/ ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10

      p1 =  -4.d0*x/(x-1d0)**2*(z3-4d0*ah0m10+ah010-5d0*ah100)

!      print*,'p1=',p1
!      print*,'x=',x
!      print*,'prefac',-4.d0*x/(x-1d0)**2
!      print*,'parantesi', z3-4d0*ah0m10+ah010-5d0*ah100
!      print*,-4d0*ah0m10+ah010-5d0*ah100
!      print*, 'HPL(0,-1,0;x) = ',ah0m10
!      print*, 'HPL(0,1,0;x) = ',ah010
!      print*, 'HPL(1,0,0;x) = ',ah100

      p2 =   4d0*x*(2d0*(1d0-x)**2-z2*(1d0-x**2))/(x-1d0)**3/(1d0+x)*
     -         ah0

      p3 =  8d0*x*(1d0-x**2)/(x-1d0)**3/(1d0+x)*ah00
      p4 =  6d0*x*(1d0+x)/(x-1d0)**3*ah000

      if (abs(1-x).lt.1d-1) then
         p5=1-dcmplx(0d0,1d0)*9*pi*(x-2d0)*(-1d0+x)**2
      else
         p5 =  -8d0*x*(1d0+x**2)/(x-1d0)**3/(1d0+x)*
     -           (9d0/10d0*z2**2 +2d0*z3*ah0 + z2*ah00 +ah0000/4d0+
     -           7d0/2d0*ah0100-2d0*ah0m100+4d0*ah00m10-ah0010 )
      endif

C$$$      p5num =
C$$$     -         (9d0/10d0*z2**2 +2d0*z3*ah0 + z2*ah00 +ah0000/4d0+
C$$$     -          7d0/2d0*ah0100-2d0*ah0m100+4d0*ah00m10-ah0010 )
C$$$      p5den =    -8d0*x*(1d0+x**2)/(x-1d0)**3/(1d0+x)




c$$$      print*,'p2=',p2
c$$$      print*,'p3=',p3
c$$$      print*,'p4=',p4
c$$$      print*,'p5=',p5
c$$$      print*,'t1=',9d0/10d0*z2**2
c$$$      print*,'t2=',+2d0*z3*ah0
c$$$      print*,'t3=',z2*ah00
c$$$      print*,'t4=',ah0000/4d0
c$$$      print*,'t5=',7d0/2d0*ah0100
c$$$      print*,'t6=',-2d0*ah0m100
c$$$      print*,'t7=',4d0*ah00m10
c$$$      print*,'t8=',-ah0010
c      print*,'p5num=',p5num
c      print*,'p5den=',p5den

      rek12a=-4.d0*x/(x-1d0)**2*(
     -         z3-4d0*ah0m10 + ah010 - 5d0*ah100 )+
     -         4d0*x*(2d0*(1d0-x)**2-z2*(1d0-x**2))/(x-1d0)**3/(1d0+x)*
     -         ah0+
     -         8d0*x*(1d0-x**2)/(x-1d0)**3/(1d0+x)*ah00+
     -         6d0*x*(1d0+x)/(x-1d0)**3*ah000+
     -         p5


c     -         -8d0*x*(1d0+x**2)/(x-1d0)**3/(1d0+x)*
c     -         (9d0/10d0*z2**2 +2d0*z3*ah0 + z2*ah00 +ah0000/4d0+
c     -          7d0/2d0*ah0100-2d0*ah0m100+4d0*ah00m10-ah0010 )

c      print*,'rek12a=',rek12a,x

      end function


cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      double complex function rek12b(x)
      implicit none
      double precision pi,z2,z3,aln2
      double complex x

      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )

      double complex ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10

      common/ahpl/ ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10


      rek12b=-6.d0*x/(x-1d0)/(x+1d0)*ah0+
     -        6.d0*x/(x-1d0)**2*ah00

c      print*,'rek12b=',rek12b

      end function



cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      double complex function reka12(x)
      implicit none
      double precision pi,z2,z3,aln2
      double complex x
      parameter ( pi   = 3.1415926535897932385d0 )
      parameter ( z2   = 1.6449340668482264365d0 )
      parameter ( z3   = 1.2020569031595942854d0 )
      parameter ( aln2  = 0.6931471805599453094d0 )

      double complex ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10

      common/ahpl/ ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10


      reka12 = 4.d0*x/(x-1d0)**2*
     -         (z3-ah100-
     -          2d0*( 4d0/5d0*z2**2+ 2d0*z3 + 3d0/2d0*z3*ah0+
     -                3d0*z3*ah1 +z2*ah10 +1d0/4d0*(1d0+2d0*z2)*ah00-
     -                2d0*ah100 +ah00m10 +1d0/4d0*ah0000 +
     -                2d0*ah10m10 -ah1000)
     -         ) +
     -         12.d0*x**2/(x-1d0)**3*ah000

c      print*,'reka12=',reka12


c$$$      print*,'q1=',4.d0*x/(x-1d0)**2*(z3-ah100)
c$$$      print*,'h2=',-4.d0*x/(x-1d0)**2*
c$$$     -           2d0*( 4d0/5d0*z2**2+ 2d0*z3 + 3d0/2d0*z3*ah0+
c$$$     -                3d0*z3*ah1 +z2*ah10 +1d0/4d0*(1d0+2d0*z2)*ah00-
c$$$     -                2d0*ah100 +ah00m10 +1d0/4d0*ah0000 +
c$$$     -                2d0*ah10m10 -ah1000)
c$$$      print*,'q2=',4d0/5d0*z2**2+ 2d0*z3 + 3d0/2d0*z3*ah0+3d0*z3*ah1
c$$$      print*,'q3=', +z2*ah10 +1d0/4d0*(1d0+2d0*z2)*ah00
c$$$      print*,'q4=',-2d0*ah100 +ah00m10 +1d0/4d0*ah0000
c$$$      print*,'q5=',2d0*ah10m10 -ah1000
c$$$      print*,'q6=',12.d0*x**2/(x-1d0)**3*ah000
c$$$      print*,'hpl10m10=',x,ah10m10

      end function






cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      subroutine myhpl(z)
      implicit none
#include "HPL.h"
      double precision x,y
      double complex z,iz,al,ali2,ali3,ali4,al1mz,ali2mz,ali3mz,ali4mz
      double complex mylog,myli2,myli3,myli4,cli2,h10m10exp
c      integer n1,n2,n3,n4
      double complex HPL4,duhr
      external HPL4
      external mylog,myli2,myli3,myli4,cli2,h10m10exp

      double complex ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10

      common/ahpl/ ah0,ah00,ah000,ah0000,ah0m10,ah010,ah100,
     -               ah1000,ah0100,ah0010,
     -               ah0m100,ah00m10,
     -               ah1,ah10,ah10m10


      x = dreal(z)
      y = dimag(z)

      al=log(z)
      ali2=myli2(z)
      ali3=myli3(z)
      ali4=myli4(z)
      al1mz=log(1d0-z)
      ali2mz=myli2(-z)
      ali3mz=myli3(-z)
      ali4mz=myli4(-z)


ccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      ah0=al
      ah00=1d0/2d0*al**2
      ah000=1d0/6d0*al**3
      ah0000=1d0/24d0*al**4

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      if ((x.eq.1d0).and.(abs(y).lt.EPS)) then
         print *,'errore Hp1: singolare'
      stop
      end if

      if (abs(y).lt.EPS) then
         ah1 = -log(dcmplx(1-x,-EPS))
      else
      ah1 = -log(1-z)
      end if

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      if (abs(y).lt.EPS) then
         iz = dcmplx(x,EPS)
      else
         iz =z
      end if

      ah10 = -log(iz)*log(1d0-iz)-ali2

ccccccccccccccccccccccccccccccccccccccccc
c        H0m10=  -log(z)*myli2(-z) +2d0*myli3(-z);

      ah0m10=  -al*ali2mz +2d0*ali3mz

ccccccccccccccccccccccccccccccccccccccccc
c        H010= log(z)* myli2(z)- 2d0* myli3(z)

      ah010= al*ali2-2d0*ali3

ccccccccccccccccccccccccccccccccccccccccc
c        H100= -1d0/2d0* log(1-z)* log(z)**2 -
c     -        log(z)* myli2(z) + myli3(z)

      ah100= -0.5d0*al1mz*al**2-al*ali2+ali3



ccccccccccccccccccccccccccccccccccccccccccc
c        H1000= -1d0/6d0* log(1-z)* log(z)**3-
c     -          1d0/2d0* log(z)**2* myli2(z)+
c     -          log(z)* myli3(z) - myli4(z)

      ah1000=-1d0/6d0*al1mz*al**3 -0.5d0*al**2*ali2+al*ali3-ali4

ccccccccccccccccccccccccccccccccccccccccccc
c        H0100= 1d0/2d0* log(z)**2* myli2(z) -
c     -         2d0* log(z)* myli3(z) +3d0* myli4(z)

      ah0100=0.5d0*al**2*ali2-2d0*al*ali3+3d0*ali4

cccccccccccccccccccccccccccccccccccccccccccc
c        H0010 = log(z)* myli3(z) - 3d0* myli4(z)

      ah0010=al*ali3-3d0*ali4

cccccccccccccccccccccccccccccccccccccccccccc
c        H0m100= -1d0/2d0* log(z)**2 *myli2(-z) +
c     -           2d0* log(z)* myli3(-z)-3d0* myli4(-z)

      ah0m100=-0.5d0*al**2*ali2mz +2d0*al*ali3mz -3d0*ali4mz


cccccccccccccccccccccccccccccccccccccccccccc
c        H00m10= -log(z) *myli3(-z) + 3d0* myli4(-z)

      ah00m10=-al*ali3mz+3d0*ali4mz

cccccccccccccccccccccccccccccccccccccccccccc


c      ah10m10=-dconjg(h10m10exp(z,ali3mz))
c      ah10m10=-h10m10exp(z,ali3mz)

      ah10m10=HPL4(1,0,-1,0,z)
c      print*,'chaplin=',ah10m10/duhr
c      stop

cccccccccccccccccccccccccccccccccccccccccccc
!      if (1>0) then
!         print*,'z     =',z
!         print*,'al  =',al
!         print*,'al1mz=',al1mz
!         print*,'prod=',al1mz*al
!         print*,'ali2=',ali2
!         print*,'ali3=',ali3
!         print*,'ali4=',ali4
!         print*,'ah0   =',ah0
!         print*,'ah00  =',ah00
!         print*,'ah000 =',ah000
!         print*,'ah0000=',ah0000
!         print*,'ah0m10=',ah0m10
!         print*,'ah010 =',ah010
!         print*,'ah100 =',ah100
!         print*,'ah1000=',ah1000
!         print*,'ah0100=',ah0100
!         print*,'ah0010=',ah0010
!         print*,'ah0m100=',ah0m100
!         print*,'ah00m10=',ah00m10
!         print*,'ah1   =',ah1
!         print*,'ah10  =',ah10
!         print*,'ah10m10 =',ah10m10
!      end if


      end subroutine

ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      double complex function h10m10exp(z,ali3mz)
      implicit none
      double complex z, lm1, l1pz, imag, cone,R,ali3mz
      double precision x1,az

      x1=sqrt(2.d0)-1.d0
      cone=dcmplx(1.d0,0.d0)
      imag=dcmplx(0d0,1d0)
      l1pz=log(1d0+z)
      az=abs(z)
c      if (az-1d0.lt.1d-7.and.az-1d0.gt.0d0) az=1d0
      if (abs(az-1d0).lt.1d-7) az=1d0

c      if (az.lt.x1.or.(dreal(z).lt.0d0.and.dreal(z).gt.-1d0)) then
      if (az.lt.x1) then


      h10m10exp=
     -  -0.75d0*z**2 - 0.08333333333333333d0*z**3 -
     -   0.10590277777777778d0*z**4-
     -   0.03194444444444444d0*z**5 - 0.037800925925925925d0*z**6 -
     -   0.016547619047619047d0*z**7 - 0.018921928146258503d0*z**8 -
     -   0.010069339464180734d0*z**9 - 0.011262161438649533d0*z**10 -
     -   0.006760017980256075d0*z**11 - 0.007442647978719257d0*z**12 -
     -   0.004847823632996793d0*z**13 - 0.005274535704406641d0*z**14 -
     -   0.0036448769463264226d0*z**15 - 0.003929237187347079d0*z**16 -
     -   0.002839569229646677d0*z**17 - 0.0030384952655659624d0*z**18 -
     -   0.0022742639756987808d0*z**19 - 0.0024188341474120963d0*z**20 -
     -   0.0018623115154869682d0*z**21 +
     -   dcmplx(0.,3.141592653589793d0)*
     -   (2.d0*z - 0.25d0*z**2 + 0.07407407407407407d0*z**3 -
     -    0.03125d0*z**4 + 0.016d0*z**5 - 0.009259259259259259d0*z**6 +
     -    0.0058309037900874635d0*z**7 - 0.00390625d0*z**8 +
     -    0.0027434842249657062d0*z**9 - 0.002d0*z**10 +
     -    0.0015026296018031556d0*z**11 - 0.0011574074074074073d0*z**12+
     -    0.0009103322712790169d0*z**13 - 0.0007288629737609329d0*z**14+
     -    0.0005925925925925926d0*z**15 - 0.00048828125d0*z**16 +
     -    0.0004070832485243232d0*z**17 - 0.0003429355281207133d0*z**18+
     -    0.000291587694999271d0*z**19 - 0.00025d0*z**20 +
     -    0.00021595939963286903d0*z**21) -
     -   (0.5d0*z**2 + 0.25d0*z**3 + 0.2152777777777778d0*z**4 +
     -    0.1597222222222222d0*z**5 + 0.13976851851851851d0*z**6 +
     -    0.11583333333333333d0*z**7 + 0.10390518707482993d0*z**8 +
     -    0.0906240551776266d0*z**9 + 0.08279621756109852d0*z**10 +
     -    0.07436019778281683d0*z**11 + 0.06885221986840855d0*z**12 +
     -    0.0630217072289583d0*z**13 + 0.05894281098141226d0*z**14 +
     -    0.054673154194896344d0*z**15 + 0.0515338598354931d0*z**16 +
     -    0.048272676903993506d0*z**17 + 0.045783095276685906d0*z**18 +
     -    0.04321101553827684d0*z**19 + 0.04118896891648765d0*z**20 +
     -    0.039108541825226335d0*z**21)*Log(z) +
     -    2.d0*Log(-1d0 + z)*ali3mz


c      h10m10exp = dconjg(h10m10exp)

      else if (abs(z+1d0).lt.1d0) then
c         print*,'primo caso    espansione a -1'
         h10m10exp=
     - -2.280817610900722d0*imag*l1pz + 0.11321718146422866d0*z +
     -   1.9366297195871596d0*imag*z - 8.83759933384843d0*imag*l1pz*z -
     -   1.7971335658472096d0*z**2 + 7.458432323981219d0*imag*z**2 -
     -   18.124620950085397d0*imag*l1pz*z**2 - 2.212510377635992d0*z**3
     -   + 9.516100393596233d0*imag*z**3 -
     -   28.971218919354445d0*imag*l1pz*z**3 -
     -   2.39032622544374d0*z**4 + 10.770176106217972d0*imag*z**4 -
     -   38.128275839505406d0*imag*l1pz*z**4 -2.1797616160793183d0*z**5+
     -   10.155926819594914d0*imag*z**5 -
     -   39.46363971684379d0*imag*l1pz*z**5 -
     -   1.590027271433481d0*z**6 + 7.57548130578779d0*imag*z**6 -
     -   31.24575693382848d0*imag*l1pz*z**6 -0.8889991719181687d0*z**7 +
     -   4.299725764968794d0*imag*z**7 -
     -   18.46433682234858d0*imag*l1pz*z**7 -
     -   0.3644614252133116d0*z**8 + 1.7813435329862448d0*imag*z**8 -
     -   7.872214091339067d0*imag*l1pz*z**8-0.10287606548977135d0*z**9 +
     -   0.5066522638626342d0*imag*z**9 -
     -   2.287212429280188d0*imag*l1pz*z**9 -
     -   0.017837132747888007d0*z**10+0.08834742326834674d0*imag*z**10 -
     -   0.4054150519632543d0*imag*l1pz*z**10-
     -   0.0014309694018715818d0*z**11+
     -   0.007118844201256682d0*imag*z**11 -
     -   0.03309325594690547d0*imag*l1pz*z**11

c         print*,'primo caso=',h10m10exp


      else if (abs(z-dcmplx(0d0,1d0)).lt.1d0) then
c        print*,'secondo caso    espansione a I'

         h10m10exp=
     - (-0.03559859360446671,-0.12660767776867576)*z -
     -   (1.786728017959732,-0.5391359284688395)*z**2 -
     -   (0.30490894562404236,0.793347155117714)*z**3 +
     -   (0.12761447859865527,1.1933345989121786)*z**4 -
     -   (2.5074053130003833,-0.5354638590790448)*z**5 -
     -   (1.0918224794770355,2.521280318690634)*z**6 +
     -   (1.601785339625966,-1.0421014534744675)*z**7 +
     -   (0.5861100516954767,0.6791194326068375)*z**8 -
     -   (0.18849491235514926,-0.20236884532443217)*z**9 -
     -   (0.040149373299117906,0.03124600690815199)*z**10 +
     -   (0.0023590435153782955,-0.003535859686762603)*z**11

      else if (abs(z-1d0).lt.1d0) then
c         print*,'terzo caso    espansione a 1'

         h10m10exp=
     -   dcmplx(0.d0,-5.664559704244618d0) + 1.7096016334563628*z -
     -   1.0822781184271921*z**2 +
     -   1.124241119852468*z**3 - 1.2516329001154851*z**4 +
     -   1.1971179853737333*z**5 - 0.9066115861791575*z**6 +
     -   0.5207725424746439*z**7 - 0.21770366674265507*z**8 +
     -   0.0623431719879346*z**9 - 0.010928428423301925*z**10 +
     -   0.0008842491721175998*z**11 + 1.8030853547393915*log(-1.d0 + z)

c$$$      else if (az.ge.x1.and.az.le.1d0.and.z.ne.cone.and.
c$$$     -         dreal(z).gt.0d0) then
c$$$
c$$$         R=(1d0-z)/(1d0+z)
c$$$
c$$$
c$$$         h10m10exp= dcmplx(-1.1499683541129118d0,5.664559704244638d0) -
c$$$     -   0.6354287544374789d0*R +
c$$$     -   4.389213155945145d0*R**2 - 5.592980384997291d0*R**3 +
c$$$     -   6.126818858603301d0*R**4 -
c$$$     -   6.352522802450248d0*R**5 + 6.442270066137144d0*R**6 -
c$$$     -   6.451123939870898d0*R**7 +
c$$$     -   6.419603482600606d0*R**8 - 6.361355499815401d0*R**9 +
c$$$     -   6.289983176870297d0*R**10 -
c$$$     -   6.2095364094729355d0*R**11 + 6.125563523668329d0*R**12 -
c$$$     -   6.039256407447986d0*R**13 + 5.953171210542008d0*R**14 -
c$$$     -   5.867532571420974d0*R**15 + 5.7836170581989945d0*R**16 -
c$$$     -   5.70130826324406d0*R**17 + 5.6212788129824345d0*R**18 -
c$$$     -   5.543300484403453d0*R**19 + 5.467739551904498d0*R**20 -
c$$$     -   5.394344244614558d0*R**21 -
c$$$     -   dcmplx(0.d0,1.d0)*
c$$$     -  (10.335425560099937d0*R - 8.710344361214407d0*R**2 +
c$$$     -    7.633932058153036d0*R**3 -
c$$$     -    6.854093792006203d0*R**4 + 6.255875316806378d0*R**5 -
c$$$     -    5.778404016136387d0*R**6 + 5.38602689019586d0*R**7 -
c$$$     -    5.05628577725861d0*R**8 + 4.7742328797098d0*R**9 -
c$$$     -    4.529480038499598d0*R**10 + 4.3145522496837305d0*R**11 -
c$$$     -    4.12391443833463d0*R**12 + 3.953368460940621d0*R**13 -
c$$$     -    3.799664555537424d0*R**14 + 3.6602425267928673d0*R**15 -
c$$$     -    3.533054371635497d0*R**16 + 3.4164396810570286d0*R**17 -
c$$$     -    3.309036202422582d0*R**18 + 3.2097144028173683d0*R**19 -
c$$$     -    3.117528772333088d0*R**20 + 3.0316810292496017d0*R**21) -
c$$$     -   R*(3.2898681336964524d0 - 2.7725887222397807d0*R +
c$$$     -      2.429956044565484d0*R**2 - 2.1817258148265206d0*R**3 +
c$$$     -      1.9913069600726236d0*R**4 - 1.8393231247003325d0*R**5 +
c$$$     -      1.7144256064010803d0*R**6 - 1.609465750271908d0*R**7 +
c$$$     -      1.5196855245553378d0*R**8 - 1.4417782755265587d0*R**9 +
c$$$     -      1.3733646355308462d0*R**10 - 1.3126827354979873d0*R**11 +
c$$$     -      1.2583962648445968d0*R**12 - 1.209470792209701d0*R**13 +
c$$$     -      1.165091382108508d0*R**14 - 1.1246061349164391d0*R**15 +
c$$$     -      1.087486526031049d0*R**16 - 1.0532989369711752d0*R**17 +
c$$$     -      1.0216838262432704d0*R**18 - 0.9923402286960379d0*R**19 +
c$$$     -      0.965014043365998d0*R**20)*Log(R) +
c$$$     -     2.*Log(-1.d0 + z)*ali3mz
c$$$
         else
            print*,'not defined',abs(z),x1
            stop
         end if



      end function




