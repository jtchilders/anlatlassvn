Display2d:false;
nolabels:true;


vca:3;
vcf:4/3;
vn:3;
vbf:-(vn^2-1)*(vn^2-4)/(16*vn);
vtf:1/2;
vda:vn^2-1;


/*   writefile("soft.log");   */

t2:1-t1;
/* calcolo del diagramma di Born qq-->QQ;
   omettiamo per ora il fattore 1/(2*s) 1/2^2 1/N_C^2
   di flusso, media sugli spin dei quark iniziali, e media
   sul colore; omettiamo inoltre il fattore C_F*T_F*N_C che c'e'
   sempre nel calcolo del colore. Percio', per ottenere
   la sezione d'urto di Born dobbiamo moltiplicare per

            1/(8*s) C_F*T_F/N_C
*/

born:4*(4*t1^2-4*t1+ro-2*ep+2)$

i[1,3]:i[1,q]$
i[1,4]:i[1,qb]$
i[2,3]:i[2,q]$
i[2,4]:i[2,qb]$
i[3,3]:i[q,q]$
i[3,4]:i[q,qb]$
i[4,3]:i[qb,q]$
i[4,4]:i[qb,qb]$

pn:born*(vcf*(2*i[1,3]+2*i[2,4]-i[3,3]-i[4,4])
   +1/vca*(2*i[1,4]+2*i[2,3]-i[1,3]-i[2,4]-i[1,2]-i[3,4]) )$

/* Extract color correlated Born; each eikonal factor appears
   twice, as ij and ji, thus divide by 2 */



mccc(y):=coefsum(factor(coefsm(diff(pn,y),[ep])));

b12:mccc(i[1,2])/2;
b13:mccc(i[1,q])/2;
b14:mccc(i[1,qb])/2;
b23:mccc(i[2,q])/2;
b24:mccc(i[2,qb])/2;
b34:mccc(i[q,qb])/2;

gamag:(11*vca-4*vtf*nlf)/6;
gamaq:3/2*vcf;

/*
   Divergent part of virtual contribution, according to VirtualFin.pdf
   notes.

   The Ellis-Sexton scale Q^2 should be set to muren^2; thus

   log 2p1.k/Q^2 = log t1 s/muren2=log t1 + vlsmu = log t1 s/m2-vlsm+vlsmu
   = vltm-vlsm+vlsmu

   log m^2/Q^2 = log m^2/s+log s/mu2 = -vlsm+vlsmu
*/

virtdivn: -born*(2*vcf/ep^2+2*gamaq/ep+2/ep*vcf)+2/ep*vlsmu*b12+
2/ep*((b13+b24)*(vltm-(vlsm-vlsmu)/2)+(b14+b23)*(vlwm-(vlsm-vlsmu)/2)
+b34*(2-ro)*vlpm/b/2);




/* totdel e' normalizzato come segue:
   e' semplicemente l'ampiezza quadra tagliata, senza includere
   lo spazio delle fasi in k1 = d3 k1/(2 k1^0 (2 pi)^3) = d phi1
   percio'
   d sigma = N * totdel/(2*s) * delta(tx) * d phi1 
           = N * totdel/(2*s) * s/(2 pi) * 2 pi delta(s*tx) * d phi1
           = N * totdel/(4 pi) d phi2
*/


kill(totdel2,totdel1);

totdel2    [   1    ]:   

-8*pi*(4*t1^2-4*t1+ro+2)*vcf^3*zg^6/(s*vda)   

 ;   

totdel1    [   1    ]:   

-4*pi*(20*t1^2-20*t1+5*ro+6)*vcf^3*zg^6/(s*vda)   

 ;   

totdel1    [   vlpm/b    ]:   

-2*pi*(ro-2)*(4*t1^2-4*t1+ro+2)*vcf^2*(2*vcf-vca)*zg^6/(s*vda)   

 ;   

totdel1    [   vlsm    ]:   

4*pi*(4*t1^2-4*t1+ro+2)*vcf^2*(2*vcf-vca)*zg^6/(s*vda)   

 ;   

totdel1    [   vltm    ]:   

4*pi*(4*t1^2-4*t1+ro+2)*vcf^2*(vca*vda*vtf^2-4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel1    [   vlwm    ]:   

4*pi*(4*t1^2-4*t1+ro+2)*vcf^2*(vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   


virtdiv:(totdel2[1]/ep^2+
          (totdel1[1]+totdel1[vlpm/b]*vlpm/b+totdel1[vlsm]*vlsm
          +totdel1[vltm]*vltm+totdel1[vlwm]*vlwm)/ep) *
         (1-ep*(vlsmu-vlsm)+ep^2*(vlsmu-vlsm)^2/2) $




norm:8*pi*zg^6/cf/27/s;

v1:ratdisrep(taylor(virtdiv,ep,0,-2));
v2:ratdisrep(taylor(virtdivn,ep,0,-2));

norm:factor(v1/v2);

df:
rat(virtdiv-virtdivn*norm)$

df:factor(df),ep=0;

df:factor(coefsm(df,[vlsm,vlpm,vlsmu,vlwm,vltm,b,nlf]));

kill(resoft);

map(lambda([z],resoft[last(z)]:first(z)),df);



kill(t2);


display2d:false;

kill(totdel0);

totdel0    [   1    ]:   

-pi*vcf^2*(192*ro*t1^2*vda*vtf^3+320*nlf*t1^2*vda*vtf^3+320*t1^2*vda*vtf^3
-192*ro*t1*vda*vtf^3-320*nlf*t1*vda*vtf^3-320*t1*vda*vtf^3+48*ro^2*vda*vtf^3
+80*nlf*ro*vda*vtf^3+176*ro*vda*vtf^3+160*nlf*vda*vtf^3+160*vda*vtf^3-192*pi
^2*t1^2*vcf*vda*vtf^2+1728*t1^2*vcf*vda*vtf^2+192*pi^2*t1*vcf*vda*vtf^2-1728
*t1*vcf*vda*vtf^2-48*pi^2*ro*vcf*vda*vtf^2+432*ro*vcf*vda*vtf^2-96*pi^2*vcf
*vda*vtf^2+576*vcf*vda*vtf^2+72*pi^2*t1^2*vca*vda*vtf^2-1216*t1^2*vca*vda
*vtf^2-72*pi^2*t1*vca*vda*vtf^2+1216*t1*vca*vda*vtf^2+21*pi^2*ro*vca*vda
*vtf^2-304*ro*vca*vda*vtf^2+36*pi^2*vca*vda*vtf^2-680*vca*vda*vtf^2+48*pi^2
*t1*vbf-24*pi^2*vbf)*zg^6/(9*s*vda^2*vtf^2)   

 ;   

totdel0[1]:totdel0[1]+pi^2/6*totdel2[1];



totdel0    [   1/b^5    ]:   

pi^3*(4*ro*t1^2+8*t1^2+4*ro*t1-16*t1+3*ro^2-8*ro+8)*vca*vcf^2*zg^6/(6*s*vda
)   

 ;   

totdel0    [   1/b^4    ]:   

-4*pi*(ro-1)*(2*t1-1)^2*vca*vcf^2*zg^6/(s*vda)   

 ;   

totdel0    [   1/b^3    ]:   

pi^3*(2*t1+ro-2)*vcf^2*(2*ro*t1*vca*vda*vtf^2-6*t1*vca*vda*vtf^2-ro*vca*vda
*vtf^2+5*vca*vda*vtf^2+4*vbf)*zg^6/(3*s*vda^2*vtf^2)   

 ;   

totdel0    [   1/b^2    ]:   

-4*pi*(ro-1)*vcf^2*(2*vcf-vca)*zg^6/(s*vda)   

 ;   

totdel0    [   1/b    ]:   

-2*pi^3*vcf^2*(16*ro*t1^2*vcf*vda*vtf^2-32*t1^2*vcf*vda*vtf^2-16*ro*t1*vcf
*vda*vtf^2+32*t1*vcf*vda*vtf^2+4*ro^2*vcf*vda*vtf^2-16*vcf*vda*vtf^2-8*ro*t1
^2*vca*vda*vtf^2+8*t1^2*vca*vda*vtf^2+7*ro*t1*vca*vda*vtf^2-5*t1*vca*vda*vtf
^2-2*ro^2*vca*vda*vtf^2+3*vca*vda*vtf^2-4*ro*t1*vbf+12*t1*vbf+2*ro*vbf-8*vbf)
*zg^6/(3*s*vda^2*vtf^2)   

 ;   

totdel0    [   vdmb/b    ]:   

4*pi*(ro-2)*(4*t1^2-4*t1+ro+2)*vcf^2*(2*vcf-vca)*zg^6/(s*vda)   

 ;   

totdel0    [   vdmp/b^5    ]:   

2*pi*(4*ro*t1^2+8*t1^2+4*ro*t1-16*t1+3*ro^2-8*ro+8)*vca*vcf^2*zg^6/(s*vda)   

 ;   

totdel0    [   vdmp/b^3    ]:   

4*pi*(2*t1+ro-2)*vcf^2*(2*ro*t1*vca*vda*vtf^2-6*t1*vca*vda*vtf^2-ro*vca*vda
*vtf^2+5*vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vdmp/b    ]:   

8*pi*vcf^2*(8*t1^2*vca*vda*vtf^2+ro*t1*vca*vda*vtf^2-11*t1*vca*vda*vtf^2+5
*vca*vda*vtf^2+4*ro*t1*vbf-12*t1*vbf-2*ro*vbf+8*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vdt    ]:   

-2*pi*(4*t1-ro-2)*vcf^2*(vca*vda*vtf^2-4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vdw    ]:   

2*pi*(4*t1+ro-2)*vcf^2*(vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vlm2    ]:   

4*pi*(4*t1^2-4*t1+ro+2)*vcf^2*(4*nlf*vtf-11*vca)*zg^6/(3*s*vda)   

 ;   

totdel0    [   vlpm/b    ]:   

-2*pi*(8*ro*t1^2-12*t1^2-8*ro*t1+12*t1-ro+2)*vcf^2*(2*vcf-vca)*zg^6/(s*vda)   

 ;   

totdel0    [   b*vlpm    ]:   

4*pi*(ro+2)*vcf^2*(8*t1^2*vtf-8*t1*vtf+2*ro*vtf+4*vtf+6*vcf-3*vca)*zg^6/(3*s
*vda)   

 ;   

totdel0    [   vlpm^2/b^5    ]:   

pi*(4*ro*t1^2+8*t1^2+4*ro*t1-16*t1+3*ro^2-8*ro+8)*vca*vcf^2*zg^6/(2*s*vda)   

 ;   

totdel0    [   vlpm^2/b^3    ]:   

pi*(2*t1+ro-2)*vcf^2*(2*ro*t1*vca*vda*vtf^2-6*t1*vca*vda*vtf^2-ro*vca*vda
*vtf^2+5*vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vlpm^2/b    ]:   

-pi*vcf^2*(8*ro*t1^2*vcf*vda*vtf^2-16*t1^2*vcf*vda*vtf^2-8*ro*t1*vcf*vda*vtf
^2+16*t1*vcf*vda*vtf^2+2*ro^2*vcf*vda*vtf^2-8*vcf*vda*vtf^2-4*ro*t1^2*vca*vda
*vtf^2-8*t1^2*vca*vda*vtf^2+2*ro*t1*vca*vda*vtf^2+14*t1*vca*vda*vtf^2-ro^2
*vca*vda*vtf^2-6*vca*vda*vtf^2-8*ro*t1*vbf+24*t1*vbf+4*ro*vbf-16*vbf)*zg^6/(s
*vda^2*vtf^2)   

 ;   

totdel0    [   vlsm    ]:   

4*pi*vcf^2*(16*nlf*t1^2*vtf-16*nlf*t1*vtf+4*nlf*ro*vtf+8*nlf*vtf+36*t1^2*vcf
-36*t1*vcf+9*ro*vcf+6*vcf-44*t1^2*vca+44*t1*vca-8*ro*vca-16*vca)*zg^6/(3*s
*vda)   

 ;   

totdel0    [   vlsm/b^4    ]:   

-2*pi*(12*t1^2+8*ro*t1-20*t1-3*ro+6)*vca*vcf^2*zg^6/(s*vda)   

 ;   

totdel0    [   vlsm/b^2    ]:   

-4*pi*(2*t1-1)*vcf^2*(2*ro*t1*vca*vda*vtf^2-6*t1*vca*vda*vtf^2-ro*vca*vda
*vtf^2+5*vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vlsm^2    ]:   

-pi*vcf^2*(16*t1^2*vcf*vda*vtf^2-16*t1*vcf*vda*vtf^2+4*ro*vcf*vda*vtf^2+8
*vcf*vda*vtf^2-16*t1^2*vca*vda*vtf^2+16*t1*vca*vda*vtf^2-3*ro*vca*vda*vtf^2-8
*vca*vda*vtf^2+16*t1*vbf-8*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vltm    ]:   

-8*pi*vcf^2*(vca*vda*vtf^2-4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   atinv*vltm    ]:   

2*pi*(2*t1^2-2*t1+ro)*vcf^2*(vca*vda*vtf^2-4*vbf)*zg^6/(vda^2*vtf^2)   

 ;   

totdel0    [   vlsm*vltm    ]:   

-2*pi*(8*t1^2-4*t1+ro+2)*vcf^2*(vca*vda*vtf^2-4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   vlwm    ]:   

-8*pi*vcf^2*(vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   

totdel0    [   auinv*vlwm    ]:   

2*pi*(2*t1^2-2*t1+ro)*vcf^2*(vca*vda*vtf^2+4*vbf)*zg^6/(vda^2*vtf^2)   

 ;   

totdel0    [   vlsm*vlwm    ]:   

-2*pi*(8*t1^2-12*t1+ro+6)*vcf^2*(vca*vda*vtf^2+4*vbf)*zg^6/(s*vda^2*vtf^2)   

 ;   


kill(vca,vcf,vn,vbf,vda,vtf,t2);

delttab:
[
ro = 4*m2/s,
t1 = -t/s,
zg = 1,
vn=3,
vca=3,
vcf=4,vcf=vcf/3,
vtf=1,vtf=vtf/2,
vda=8,
vbf=-(vn**2-1)*(vn**2-4)/(16*vn),
nlf=nl,
t2=1-t1,
b=dsqrt(1-ro),
lp=(1+b)/2,
lm=(1-b)/2,
at=t1*s,
aw=t2*s,
as=-s,
vlm2=dlog(m2/mu2),
vltm=dlog(at/m2),
vlpm=dlog(lp/lm),
vlsm=dlog(s/m2),
vlsmu=dlog(s/mu2),
vlwm=dlog(aw/m2),
vlbl=dlog(b/lm),
vdw=ddilog((aw-m2)/aw)-1/2*vlwm^2,
vdt=ddilog((at-m2)/at)-1/2*vltm^2,
vdmp=ddilog(-lm/lp),
vdmb=ddilog(-lm/b)+1/2*vlbl^2,
auinv=1/(m2-aw),
atinv=1/(m2-at),
srlgpr=
dlog((1-b)/(1+b)*t2/t1)*
dlog((1+b)/(1-b)*t2/t1),
srl21p=
ddilog(1-(1+b)/(1-b)*t1/t2),
srl21m=
ddilog(1-(1-b)/(1+b)*t1/t2),
srl22p=
ddilog(1-(1+b)/(1-b)*t2/t1),
srl22m=
ddilog(1-(1-b)/(1+b)*t2/t1),
srl12=dlog(t1/t2),
srlgro=dlog(4*t1*t2/ro),
srlg1=
dlog((1+b)/(1-b))/b,
srl2l=
(ddilog(-4*b/(1-b)^2)-ddilog(4*b/(1+b)^2))/b,
srl212=1/2*dlog(4*t1*t2/ro)^2+ddilog(1-ro/4/t1/t2),
sl3515=(srlgpr+b^2*srlg1^2+srl21p+srl21m),
sl3525=(srlgpr+b^2*srlg1^2+srl22p+srl22m),
softt1=ddilog(1-2*t1/(1-b))+ddilog(1-2*t1/(1+b))+
       log(2*t1/(1+b))*log(2*t1/(1-b)),
softt2=ddilog(1-2*t2/(1-b))+ddilog(1-2*t2/(1+b))+
       log(2*t2/(1+b))*log(2*t2/(1-b)),
softb=ddilog(2*b/(1+b))-ddilog(-2*b/(1-b)),
lt1=log(t1),lt2=log(t2),lb=log(b*betfac)
];


load(fortify);
load(marrays);
ntmax:40;

funcn:qqqq2;

d_file:'(
data:[s,t,pi,nl,mu2,m2,betfac],
target:[funcn],
prg:forcode(
  data,target,
  append(delttab,[ss=resoft,dd=totdel0,funcn=(dd+ss)/(4*pi)])
  ),
prg:append(
 [concat('function,\ ,string(funmake(funcn,[s,t,m2,mu2]))),
  concat('implicit,\ double\ precision\ \(a\-z\)),
  'integer\ nl,
  concat('character\ \*\ 2\ scheme),
  concat('common\/nl\/nl),
  concat('common\/betfac\/betfac),
  concat('common\/scheme\/scheme),
  concat('data,\ pi\/3\.141\ 592\ 653\ 589\ 793\/)],
 prg,
 [return,end]
 ),
 apply('writefile,[concat(string(funcn),"vfin.for")]),
 map(mfortran,prg),
 closefile()
);

load(mfortran);
''d_file;
