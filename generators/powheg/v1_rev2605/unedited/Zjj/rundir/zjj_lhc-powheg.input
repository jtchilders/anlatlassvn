! Zjj production

! multiseed run
#manyseeds 1       ! Used to perform multiple runs with different random
                   ! seeds in the same directory.
                   ! If set to 1, the program asks for an integer j.
                   ! The file pwgseeds.dat at line j is read, and the
                   ! integer at line j is used to initialize the random
                   ! sequence for the generation of the events.
                   ! The event file is called pwgevents-'j'.lhe


! to control virtual corrections
use-OLP-interface 1 ! if set to 1, an OLP program has to be linked.
                    ! POWHEG will produce an order file (order.lh) with a first call
                    ! to pwhg_main, and then will run normally, evaluating virtual amplitudes
                    ! using the external OLP, after a second call to pwhg_main,
                    ! provided that the OLP is linked and a contract file
                    ! (contract.lh) has been succesfully generated by the OLP itself.
                    ! To link an external OLP, the Makefile has to be
                    ! modified properly, and two lines in virtual.f
                    ! have to be uncommented (more precise instructions
                    ! can be found at the top of virtual.f).

! sanity check for external virtuals
#check_ref_amp 1 ! if set to 1, perform a sanity check of the independent born and virtual
                 ! amplitudes at a reference phase space point. Check the manual for more details.

#fakevirt 0 ! (default 0) When set to 1, the generation of the integration grid (cfr ncall1 and itmx1)
            ! is quicker, since virtual corrections are estimated in an approximate
            ! way. During the integration itself (cfr ncall2 and itmx2) and the generation
            ! of events, the full virtual amplitudes must be included, but, if needed,
            ! runs can be parallelized by means of the manyseeds option (similarly
            ! to what is described in Wp_Wp_J_J/Docs )

! physical parameters
masswindow_low   10
masswindow_high  10
Zmass    91.1876
Zwidth   2.49
sthw2    0.23
alphaem  0.007763854599

! ren. and fac. scales
scalechoice 2    ! 1=mz, 2=Ht/2, 3=EtZ
renscfact  1d0   ! (default 1d0) ren scale factor: muren  = muref * renscfact 
facscfact  1d0   ! (default 1d0) fac scale factor: mufact = muref * facscfact 

! Born phase space and event weights
bornsuppfact 1      ! to have weighted events (needed for this implementation)
withnegweights 1    ! to allow neg. weighted events (needed for this implementation)
#withdamp    0       ! (default 0, do not use) use Born-zero damping factor

#supp_m2inv56  25d0    ! (default 25) the value of (Lambda_m)^2 (notation of arXiv:1204.5433)
#supp_pt2j     100d0   ! (default 100) the value of (Lambda_pt)^2 (notation of arXiv:1204.5433)

! Run parameters
numevts 1000         ! number of events to be generated
ih1   1           ! hadron 1 (1 for protons, -1 for antiprotons)
ih2   1           ! hadron 2 (1 for protons, -1 for antiprotons)
ndns1 131         ! pdf set for hadron 1 (mlm numbering)
ndns2 131         ! pdf set for hadron 2 (mlm numbering)
ebeam1 3500d0     ! energy of beam 1
ebeam2 3500d0     ! energy of beam 2

! To be set only if using different pdf sets for the two incoming hadrons
! QCDLambda5  0.25 ! for not equal pdf sets 

! Parameters to allow or not the use of stored data
use-old-grid    1 ! if 1 use old grid if file pwggrids.dat is present (<> 1 regenerate)
use-old-ubound  1 ! if 1 use norm of upper bounding function stored in pwgubound.dat, if present; <> 1 regenerate

ncall1 250000  ! number of calls for initializing the integration grid
itmx1    2     ! number of iterations for initializing the integration grid
ncall2 250000  ! number of calls for computing the integral and finding upper bound
itmx2    2     ! number of iterations for computing the integral and finding upper bound

foldcsi   1    ! number of folds on csi integration
foldy     1    ! number of folds on  y  integration
foldphi   1    ! number of folds on phi integration
nubound  100000     ! number of bbarra calls to setup norm of upper bounding function
icsimax  1     ! <= 100, number of csi subdivision when computing the upper bounds
iymax    1     ! <= 100, number of y subdivision when computing the upper bounds
xupbound 2d0   ! increase upper bound for radiation generation


! OPTIONAL PARAMETERS

#testplots  1      ! to generate plots (needs a suitable analysis)
#bornonly   1      ! if 1 do Born only
#smartsig   1      ! 

#flg_debug 1
#ubsigmadetails 1

! random numbers
#iseed 1234222
#iseed    5437     !  Start the random number generator with seed iseed
#rand1     0       !  skipping  rand2*100000000+rand1 numbers.         
#rand2     0       !  (see RM48 short writeup in CERNLIB)              
